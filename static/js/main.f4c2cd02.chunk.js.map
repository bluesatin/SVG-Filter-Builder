{"version":3,"sources":["components/InputFields.js","components/ElementForms.js","components/FilterEditor.js","App.js","reportWebVitals.js","index.js"],"names":["state","inputMap","int","range","handleChange","value","changedField","props","field","onChange","label","Fragment","this","name","React","cloneElement","type","autoId","Component","defaultProps","InputLabel","htmlFor","className","TextInput","event","target","size","IdInput","pickwhipButtonRef","createRef","handleNewId","handlePickWhipStart","document","addEventListener","handlePickWhipEnd","handlePickWhipMove","removeEventListener","pickWhipLine","release","hoverElement","querySelector","querySelectorAll","forEach","element","classList","remove","resultValue","hoverField","options","end","add","lineOptions","start","current","position","top","left","style","appendTo","body","LinePath","containerDiv","resultFieldButtons","title","onClick","blankTest","RegExp","inFieldButtons","map","index","test","disabled","elementIds","ref","onMouseDown","NumberInput","step","adjustValue","eventValue","newValue","parseFloat","isNaN","isPercentage","includes","isNegative","isDecimal","isTrailing","match","length","toFixed","toString","Math","ceil","floor","parseInt","repeat","handleRandomise","min","max","randomValue","random","handleStepUpDown","direction","stepSize","passive","preventDefault","handleKeyDown","newStepSize","handleKeyModifier","key","handleWheel","activeElement","parentElement","contains","deltaY","clearTimeout","wheelBlock","setTimeout","stepMultiplier","shiftKey","keyMultipliers","ctrlKey","metaKey","altKey","setState","handleWheelBlock","randomiseButton","onWheel","inputMode","pattern","onKeyDown","BooleanInput","elementRef","tristate","indeterminate","checked","ListInput","newIndex","findIndex","option","newOption","Array","isArray","dividerCheck","dividerTest","ColorInput","timer","MatrixInput","newMatrix","stringToMatrix","mergeMatrix","emptyMatrix","rowCol","split","iRow","iCol","matrixToString","grid","rowCount","fill","colCount","baseMatrix","override","entries","row","matrix","delim","join","a","matrixString","matrixArray","numOfValues","divisor","array","output","push","splice","splitToRows","propMatrix","matrixValues","rowLabels","colLabels","colLabel","EditElementForm","fieldName","newField","attributes","newElement","onChangeElement","handleChangeChildElements","childElements","handleDeleteElement","onDeleteElement","componentMap","url","href","rel","FormFields","EditElementIdsForm","handleSelectionClick","selected","onSelectElement","handleMoveElement","moveDirection","onMoveElement","handleMoveElementUp","handleMoveElementDown","idFieldCountMap","result","idFieldCount","in","in2","FormFieldsFeBlend","modeOptions","mode","FormFieldsFeColorMatrix","handleTypeChange","values","FormFieldsFeComponentTransfer","fixedChildElements","FormFieldsFeComposite","handleOperatorChange","svgElements","feComposite","k1","k2","k3","k4","operator","FormFieldsFeConvolveMatrix","order","kernelMatrix","bias","targetX","targetY","edgeMode","preserveAlpha","FormFieldsFeDiffuseLighting","surfaceScale","diffuseConstant","FormFieldsFeDisplacementMap","scale","xChannelSelector","yChannelSelector","FormFieldsFeDropShadow","dx","dy","stdDeviation","FormFieldsFeFlood","FormFieldsFeGaussianBlur","FormFieldsFeImage","handleAspectRatioChange","preserveAspectRatioCrop","preserveAspectRatioAlign","trim","preserveAspectRatio","FormFieldsFeMerge","FormFieldsFeMorphology","radius","FormFieldsFeOffset","FormFieldsFeSpecularLighting","specularConstant","specularExponent","FormFieldsFeTile","FormFieldsFeTurbulence","handleBaseFrequencyChange","baseFrequencyY","baseFrequencyX","baseFrequency","seed","numOctaves","stitchTiles","FormFieldsFeDistantLight","azimuth","elevation","FormFieldsFePointLight","x","y","z","width","height","FormFieldsFeSpotLight","pointsAtX","pointsAtY","pointsAtZ","limitingConeAngle","FormFieldsFeMergeNode","FormFieldsFeFunc","oldType","tableValues","slope","intercept","amplitude","exponent","offset","FormFieldsIds","id","FormFieldsPosition","FormFieldsChildElements","newElementType","handleNewElementTypeChange","handleAddNewElement","elementType","prevState","JSON","parse","stringify","elements","newChildElements","handleChangeElement","elementIndex","i","FilterEditor","handleSelectElement","targetIndex","targetAutoId","filter","el","selectedId","elementsAdded","shorthand","elementCount","resultAttribute","selectedElement","find","onAddNewElement","ElementList","FilterPreview","previewSVG","previewPreset","svg","SVGPreview","generateElement","elementProps","Object","attribute","attributeName","regExp","replace","m","p1","toUpperCase","createElement","elementMap","cx","cy","r","textAnchor","textLength","fontFamily","fontSize","fontWeight","version","xmlns","xmlnsXlink","FilterElements","FilteredElement","SVGPreviewCode","svgCode","ReactDOMServer","renderToStaticMarkup","xml","indentSize","collapsible","theme","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f4c2cd02.chunk.js","sourcesContent":["// ┌───────────┐\r\n// │  Imports  │\r\n// ╘═══════════╛\r\nimport React from \"react\"; //React\r\n// import ReactDOM from \"react-dom\";\r\nimport { LinePath, CurvyPath, SquarePath } from \"svg-dom-arrows\";\r\n// ┌─────────────────────────────┐\r\n// │  InputField Base Component  │\r\n// ╘═════════════════════════════╛\r\nexport class InputField extends React.Component {\r\n  // DefaultProps\r\n  static defaultProps = {};\r\n  // State\r\n  state = {};\r\n  // Inputs - Map\r\n  inputMap = {\r\n       \"text\": <TextInput />,\r\n         \"id\": <IdInput />,\r\n     \"number\": <NumberInput />,\r\n        \"int\": <NumberInput int={true} />,\r\n    \"boolean\": <BooleanInput />,\r\n      \"range\": <NumberInput range={true} />,\r\n       \"list\": <ListInput />,\r\n      \"color\": <ColorInput />,\r\n     \"matrix\": <MatrixInput />,\r\n  };\r\n  // Handler - Change\r\n  handleChange = (value) => {\r\n    // Get the value from event, assign to field, and pass up to parent\r\n    const changedField = this.props.field;\r\n    changedField.value = value;\r\n    this.props.onChange(changedField);\r\n  };\r\n  // Render\r\n  render() {\r\n    // Create label element to pass to children\r\n    const label = (\r\n        <React.Fragment>\r\n          { this.props.label && \r\n            <InputLabel name={this.props.name}\r\n                        label={this.props.label} />\r\n          }\r\n        </React.Fragment>\r\n    );\r\n    // Return\r\n    return(\r\n      <React.Fragment>\r\n        {React.cloneElement(this.inputMap[this.props.field.type], {\r\n            ...this.props.field,\r\n            \"label\": label,\r\n            \"autoId\": this.props.autoId,\r\n            \"onChange\": this.handleChange,\r\n          }\r\n        )}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n// ┌─────────────────┐\r\n// │  Input - Label  │\r\n// ╘═════════════════╛\r\nclass InputLabel extends React.Component {\r\n  // Render\r\n  render() {\r\n    // Return\r\n    return(\r\n      <label htmlFor={this.props.name} className=\"field--label\">\r\n        {typeof(this.props.label) === \"string\" ? \r\n         this.props.label : this.props.name}\r\n      </label>\r\n    );\r\n  }\r\n}\r\n// ┌────────────────┐\r\n// │  Input - Text  │\r\n// ╘════════════════╛\r\nexport class TextInput extends React.Component {\r\n  // DefaultProps\r\n  static defaultProps = {\r\n    \"value\": \"\",\r\n    \"label\": true,\r\n  };\r\n  // Handler - Change\r\n  handleChange = (event) => {\r\n    // Pass change up to parent\r\n    this.props.onChange(event.target.value, this.props.name);\r\n  }\r\n  // Render\r\n  render() {\r\n    return(\r\n      <div className=\"field--container\">\r\n        { this.props.label && \r\n          <InputLabel name={this.props.name}\r\n                      label={this.props.label} />\r\n        }\r\n        <div className=\"field--main\">\r\n          <input type=\"text\" name={this.props.name}\r\n                 className=\"field--input\" size=\"\"\r\n                 value={this.props.value ?? \"\"} onChange={this.handleChange} />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n// ┌──────────────┐\r\n// │  Input - Id  │\r\n// ╘══════════════╛\r\nexport class IdInput extends React.Component {\r\n  // DefaultProps\r\n  static defaultProps = {\r\n    \"value\": \"\",\r\n    \"label\": true,\r\n    \"options\": [],\r\n    \"elementIds\": [],\r\n  };\r\n  // Properties\r\n  pickwhipButtonRef = React.createRef();\r\n  // Handlers - Change\r\n  handleChange = (event) => {\r\n    // console.log(`IdInput | handleChange:`, event.target.value);\r\n    this.props.onChange(event.target.value, this.props.name);\r\n  }\r\n  // Handlers - Autofill ID\r\n  handleNewId = (event) => {\r\n    this.props.onChange(this.props.autoId);\r\n  }\r\n  // Handlers - Pick-Whip ID Start\r\n  handlePickWhipStart = (event) => {\r\n    // Add events: MouseUp, MouseMove\r\n    document.addEventListener(\"mouseup\", this.handlePickWhipEnd);\r\n    document.addEventListener(\"mousemove\", this.handlePickWhipMove);\r\n  }\r\n  // Handlers - Pick-Whip ID End\r\n  handlePickWhipEnd = (event) => {\r\n    // Cleanup event-listeners, and pick-whip line\r\n    document.removeEventListener(\"mouseup\", this.handlePickWhipEnd);\r\n    document.removeEventListener(\"mousemove\", this.handlePickWhipMove);\r\n    if (this.pickWhipLine) {\r\n      this.pickWhipLine.release(); this.pickWhipLine = null;\r\n    }\r\n    // Find which filter--element is under mouse\r\n    const hoverElement = document.querySelector(\".element--form:hover\")\r\n                         ?? document.querySelector(\".filter--element:hover\");\r\n    // Clear highlights after recording which was picked\r\n    document.querySelectorAll(\".pickwhip--hover\").forEach(element => {\r\n      element.classList.remove(\"pickwhip--hover\");\r\n    });\r\n    // If no filter--element was found; do nothing\r\n    if (!hoverElement) { return; }\r\n    // Get value of the filter--element, and update value\r\n    const resultValue = hoverElement.querySelector(\"input[name='result']\").value;\r\n    this.props.onChange(resultValue, this.props.name);\r\n  }  \r\n  // Handlers - Pick-Whip ID Move\r\n  handlePickWhipMove = (event) => {\r\n    // Find which valid element is under mouse\r\n    const hoverElement = document.querySelector(\".element--form:hover\")\r\n                         ?? document.querySelector(\".filter--element:hover\");\r\n    // If no valid hover-element found, do nothing\r\n    if (!hoverElement) { return; }\r\n    // Find the field we're grabbing data from\r\n    const hoverField = hoverElement.querySelector(\"input[name='result']\");\r\n    // If valid hover-target hasn't changed, do nothing\r\n    if (hoverField === this?.pickWhipLine?.options?.end?.element) { return; }\r\n    // Clear old highlight, and highlight new hover-element\r\n    document.querySelector(\".pickwhip--hover\")?.classList?.remove(\"pickwhip--hover\");\r\n    hoverElement.classList.add(\"pickwhip--hover\");\r\n    // Update pick-whip line options, and refresh it\r\n    if (this.pickWhipLine) { this.pickWhipLine.release(); }\r\n    const startElement = this.pickwhipButtonRef.current;\r\n    const lineOptions = {\r\n      start: {\r\n        element: startElement,\r\n        position: { top: 0.5, left: 0.5 }\r\n      },\r\n      end : {\r\n        element: hoverField,\r\n        position: { top: 0.5, left: 0.5 }\r\n      },\r\n      style: \"stroke:hsla(0,0%,0%,0.8); stroke-width:2; fill:transparent;\",\r\n      appendTo: document.body,\r\n    };\r\n    this.pickWhipLine = new LinePath(lineOptions);\r\n    this.pickWhipLine.containerDiv.style[\"pointer-events\"] = \"none\";\r\n    // console.log(`pickWhipLine | Update:`, this.pickWhipLine);\r\n  }\r\n  // Render\r\n  render() {\r\n    // Initialise\r\n    const resultFieldButtons = (\r\n      <button className=\"field--button\" title=\"Autofill ID\" onClick={this.handleNewId}>\r\n        {/* <i className=\"fas fa-file-signature fa-fw\"></i> */}\r\n        <i className=\"fas fa-sync fa-fw\"></i>\r\n      </button>\r\n    );\r\n    const blankTest = new RegExp(/^\\W+$/); //Blank divider check\r\n    const inFieldButtons = (\r\n      <React.Fragment>\r\n        <select className=\"field--button--dropdown\" \r\n                value={this.props.value ?? \"\"} onChange={this.handleChange}>\r\n          <option value=\"\"></option> {/* Blank entry at start of list */}\r\n          {this.props.options.map((value, index) =>\r\n              <option key={value} value={value ?? \"\"} \r\n                      className={blankTest.test(value) ? \"divider\" : null}\r\n                      disabled={blankTest.test(value)}>\r\n                {value}\r\n              </option>\r\n          )}\r\n          {this.props.elementIds.map((value, index) =>\r\n            <option key={value} value={value ?? \"\"} \r\n                    className={blankTest.test(value) ? \"divider\" : null}\r\n                    disabled={blankTest.test(value)}>\r\n              {value}\r\n            </option>\r\n          )}\r\n        </select>\r\n        <button className=\"field--button\" title=\"Pick-Whip ID\"\r\n                ref={this.pickwhipButtonRef} \r\n                onMouseDown={this.handlePickWhipStart}>\r\n          <i className=\"fas fa-crosshairs fa-fw\"></i>\r\n        </button>\r\n      </React.Fragment>\r\n    );\r\n    // Return\r\n    return(\r\n      <div className=\"field--container\">\r\n        { this.props.label && \r\n          <InputLabel name={this.props.name}\r\n                      label={this.props.label} />\r\n        }\r\n        <div className=\"field--main\">\r\n          <input type=\"text\" name={this.props.name} \r\n                 className=\"field--input\" size=\"\"\r\n                 value={this.props.value ?? \"\"} onChange={this.handleChange} />\r\n          <div className=\"field--buttons\">\r\n            { (this.props.name === \"result\") &&\r\n              resultFieldButtons\r\n            }\r\n            { (this.props.name === \"in\" || this.props.name === \"in2\") &&\r\n              inFieldButtons\r\n            }\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n// ┌──────────────────┐\r\n// │  Input - Number  │\r\n// ╘══════════════════╛\r\nexport class NumberInput extends React.Component {\r\n  // DefaultProps\r\n  static defaultProps = {\r\n    \"value\": \"\",\r\n    \"label\": true,\r\n    \"step\": 1, \r\n    \"int\": false,\r\n    \"range\": false,\r\n    \"min\": 1, \"max\": 10,\r\n    \"keyMultipliers\": {\r\n      \"shiftKey\": 10,\r\n      \"ctrlKey\": 2.5,\r\n      \"altKey\": 0.1,\r\n    },\r\n  };\r\n  // State\r\n  state = {\r\n    \"step\": this.props.step,\r\n  };\r\n  // Component - Mount\r\n  componentDidMount() {\r\n    // Add event-listener that prevents default wheel events\r\n    document.body.addEventListener(\"wheel\", this.handleWheelBlock, { passive: false });\r\n  }\r\n  // Component - UnMount\r\n  componentWillUnmount() {\r\n    // Clear event-listener that prevents default wheel events\r\n    document.body.removeEventListener(\"wheel\", this.handleWheelBlock);\r\n  }\r\n  // Handler - Change\r\n  handleChange = (event, adjustValue) => {\r\n    // Initialise\r\n    const eventValue = event.target.value ?? this.props.value;\r\n    // If eventValue doesn't pass validation; don't change anything\r\n    let regExp = new RegExp(\"^[-]?[0-9]*[.]?[0-9]*[%]?$\");\r\n    if (!regExp.test(eventValue)) { return; }\r\n    // If returning to blank value; pass blank to parent component and return\r\n    if (eventValue === \"\" && !adjustValue) { \r\n      this.props.onChange(\"\", this.props.name); \r\n      return;\r\n    } \r\n    // Otherwise, prepare new value\r\n    let newValue = parseFloat(eventValue);\r\n    if (isNaN(newValue)) { newValue = \"\"; }\r\n    // Flag certain conditions\r\n    let isPercentage = typeof(eventValue) === \"string\"\r\n                       && eventValue.includes(\"%\") ? true : false;\r\n    let isNegative = typeof(eventValue) === \"string\"\r\n                     && eventValue.includes(\"-\") ? true : false;\r\n    let isDecimal = typeof(eventValue) === \"string\"\r\n                    && eventValue.includes(\".\") ? true : false;\r\n    let isTrailing = (isDecimal === true\r\n                      && eventValue.match(/[.][1-9]*([0]+)[^\\d]*$/)?.[1]?.length) ?? false;\r\n    // If adjusting value; modify current value, and re-check\r\n    if (adjustValue) {\r\n      if (newValue === \"\") { newValue = 0; }\r\n      newValue = parseFloat((newValue + adjustValue).toFixed(5));\r\n      if (newValue >= 0) { isNegative = false; }\r\n      if (!newValue.toString().includes(\".\")) { isDecimal = false; }\r\n    }\r\n    // If int mode is enabled; convert to int\r\n    if (this.props.int === true) {\r\n      // If adjusting value, round it up/down\r\n      if (adjustValue > 0) { newValue = Math.ceil(newValue); }\r\n      else if (adjustValue < 0) { newValue = Math.floor(newValue); }\r\n      // Otherwise if typing number, just parse int\r\n      else { newValue = parseInt(newValue); }\r\n      // Fix NaN result, and set decimal flag\r\n      if (isNaN(newValue)) { newValue = \"\"; }\r\n      isDecimal = false;\r\n    }   \r\n    // If newValue was negative, and missing negative sign; re-add it\r\n    if (isNegative && !newValue.toString().includes(\"-\")) { \r\n      newValue = \"-\" + newValue; \r\n    }\r\n    // If newValue was decimal, and missing decimal; re-add it\r\n    if (isDecimal && !newValue.toString().includes(\".\")) {\r\n      newValue = newValue + \".\";\r\n    }\r\n    // If there were trailing zeroes; re-add them\r\n    if (isTrailing > 0) { \r\n      newValue = newValue + \"0\".repeat(isTrailing);\r\n    }\r\n    // If newValue was percentage; re-add percentage\r\n    if (isPercentage) { newValue = newValue + \"%\"; }\r\n    // Pass event to parent component\r\n    this.props.onChange(newValue, this.props.name);\r\n  }\r\n  // Handler - Randomise\r\n  handleRandomise = (event) => {\r\n    // Initialise\r\n    let min = 1; let max = 999999999;\r\n    // Generate new value (integer, inclusive)\r\n    min = Math.ceil(min); max = Math.floor(max);\r\n    let randomValue = Math.floor(Math.random() * (max - min + 1) + min);\r\n    // Pass event to parent component\r\n    this.props.onChange(randomValue, this.props.name);\r\n  }\r\n  // Handler - handleStepUpDown\r\n  handleStepUpDown = (event, direction, stepSize) => {\r\n    // Initialise\r\n    if (event.passive === true) { event.preventDefault(); }\r\n    // Calculate adjustment-size\r\n    stepSize = stepSize || this.state.step || 1;\r\n    const adjustValue = stepSize * direction;\r\n    // Pass event to change handler\r\n    this.handleChange(event, adjustValue);\r\n  }\r\n  // Handler - handleKeyDown\r\n  handleKeyDown = (event) => {\r\n    // If there's a key-modifier being pressed; get the step-size multiplier\r\n    const newStepSize = this.handleKeyModifier(event);\r\n    // Handle arrow-keys; by doing a step up/down\r\n    if (event.key === \"ArrowUp\") { this.handleStepUpDown(event, 1, newStepSize); }\r\n    else if (event.key === \"ArrowDown\") { this.handleStepUpDown(event, -1, newStepSize); }\r\n    // If it's a repeat press of another key; ignore it\r\n    if (event.repeat === true) { return; }\r\n  }\r\n  // Handler - handleWheel\r\n  handleWheel = (event) => {\r\n    // If no inputs focused, do nothing\r\n    if (event.target !== document.activeElement\r\n        && !event.target.parentElement.contains(document.activeElement)) { return; }\r\n    // If scroll wasn't up/down, do nothing\r\n    if (!event.deltaY) { return; }\r\n    // If scroll was up/down at max/min, do nothing\r\n    if ((event.deltaY < 0 && event.target.value === this.props.max)\r\n        || (event.deltaY > 0 && event.target.value === this.props.min)) { return; }\r\n    // If there's a key-modifier being pressed; get the step-size multiplier\r\n    const newStepSize = this.handleKeyModifier(event);\r\n    // Start/reset timer that blocks default scroll events\r\n    clearTimeout(this.wheelBlock); \r\n    this.wheelBlock = setTimeout(() => {\r\n      this.wheelBlock = false;\r\n    }, 250);\r\n    // Trigger adjustment step event\r\n    if (event.deltaY < 0) { this.handleStepUpDown(event, 1, newStepSize); }\r\n    else if (event.deltaY > 0) { this.handleStepUpDown(event, -1, newStepSize); }\r\n  }\r\n  // Handler - handleKeyModifier\r\n  handleKeyModifier = (event) => {\r\n    // If there's a key-modifier being pressed; get the step-size multiplier\r\n    let stepMultiplier = 1;\r\n    if (event.shiftKey) { stepMultiplier = this.props.keyMultipliers.shiftKey; }\r\n    else if (event.ctrlKey || event.metaKey) { stepMultiplier = this.props.keyMultipliers.ctrlKey; }\r\n    else if (event.altKey) { stepMultiplier = this.props.keyMultipliers.altKey; }\r\n    // Calculate new step-size\r\n    let newStepSize = parseFloat((this.props.step * stepMultiplier).toFixed(5));\r\n    this.setState({ \"step\": newStepSize });\r\n    return newStepSize;\r\n  }\r\n  // Handler - handleWheelBlock\r\n  handleWheelBlock = (event) => {\r\n    // If timer is running, block event\r\n    if (this.wheelBlock) { event.preventDefault(); }\r\n  }\r\n  // Render\r\n  render() {\r\n    // Initialise\r\n    const randomiseButton = (\r\n      <button className=\"field--button\" title=\"Randomise\" \r\n              onClick={this.handleRandomise}>\r\n        <i className=\"fas fa-random fa-fw\"></i>\r\n      </button>\r\n    );\r\n    // Return\r\n    return(\r\n      <div className=\"field--container\">\r\n        { this.props.label && \r\n          <InputLabel name={this.props.name}\r\n                      label={this.props.label} />\r\n        }\r\n        <div className=\"field--main\"\r\n             onWheel={this.handleWheel}>\r\n          <input type=\"text\" name={this.props.name}\r\n                 inputMode=\"numeric\" pattern=\"^[-]?[0-9]*[.]?[0-9]*[%]?$\"\r\n                 className=\"field--input\" size=\"\"\r\n                 value={this.props.value ?? \"\"} \r\n                 onChange={this.handleChange}\r\n                 onKeyDown={this.handleKeyDown} />\r\n          { this.props.range &&\r\n            <input type=\"range\" name={`${this.props.name}_slider`}\r\n                   className=\"input--stacked\" size=\"\"\r\n                   value={this.props.value ?? \"\"}\r\n                   step={this.state.step}\r\n                   min={this.props.min} max={this.props.max}\r\n                   onChange={this.handleChange}\r\n                   onKeyDown={this.handleKeyDown} /> }\r\n          { this.props.name === \"seed\" &&\r\n            <div className=\"field--buttons\">\r\n              { randomiseButton }\r\n            </div>\r\n          }\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n// ┌───────────────────┐\r\n// │  Input - Boolean  │\r\n// ╘═══════════════════╛\r\nexport class BooleanInput extends React.Component {\r\n  // DefaultProps\r\n  static defaultProps = {\r\n    \"value\": null,\r\n    \"label\": true,\r\n    \"tristate\": false,\r\n  }\r\n  // Properties\r\n  elementRef = React.createRef();\r\n  // Component - Mount\r\n  componentDidMount() {\r\n    // Set indeterminate state, due to it only being mutable by javascript\r\n    this.elementRef.current.indeterminate = (this.props.value == null) ? true : false;\r\n  }\r\n  // Component - Update\r\n  componentDidUpdate() {\r\n    // Set indeterminate state, due to it only being mutable by javascript\r\n    this.elementRef.current.indeterminate = (this.props.value == null) ? true : false;\r\n  }\r\n  // Handler - Change\r\n  handleChange = (event) => {\r\n    // Calculate new value\r\n    let newValue;\r\n    if (this.props.value === false) { newValue = true; }\r\n    else if (this.props.value === true) { newValue = (this.props.tristate) ? null : false; } \r\n    else if (this.props.value == null) { newValue = false; }\r\n    // Pass new value up to parent\r\n    this.props.onChange(newValue, this.props.name);\r\n  }\r\n  // Render\r\n  render() {\r\n    // Return\r\n    return(\r\n      <div className=\"field--container\">\r\n        { this.props.label && \r\n          <InputLabel name={this.props.name}\r\n                      label={this.props.label} />\r\n        }\r\n        <div className=\"field--main\">\r\n          <input className=\"input--checkbox\"\r\n                 type=\"checkbox\" name={this.props.name}\r\n                 ref={this.elementRef}\r\n                 checked={this.props.value === true}\r\n                 onChange={this.handleChange} />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n// ┌────────────────┐\r\n// │  Input - List  │\r\n// ╘════════════════╛\r\nexport class ListInput extends React.Component {\r\n  // DefaultProps\r\n  static defaultProps = {\r\n    \"value\": \"\",\r\n    \"label\": true,\r\n    \"options\": [],\r\n  }\r\n  // Property - options\r\n  get options() {\r\n    // Process each option entry\r\n    return this.props.options.map(option => {\r\n      let newOption = {};\r\n      // If option entry has label/value values, process it\r\n      if (option.value || option.label) { \r\n         newOption.value = option.value ?? option.label ?? \"\";\r\n         newOption.label = option.label ?? option.value ?? \"\";\r\n      }\r\n      // If option entry is an array, process it\r\n      else if (Array.isArray(option)) { \r\n          newOption.value = option[0] ?? option[1] ?? \"\";\r\n          newOption.label = option[1] ?? option[0] ?? \"\";\r\n      }\r\n      // Otherwise, it's just a single value, process it\r\n      else {\r\n          newOption.value = option ?? \"\";\r\n          newOption.label = option ?? \"\";\r\n      }\r\n      // Check if option should be disabled\r\n      let dividerCheck = new RegExp(/^[\\W]+$/); //Blank divider check\r\n      if (option?.disabled || dividerCheck.test(newOption.label)) {\r\n        newOption.disabled = true;\r\n      }\r\n      // Return processed newOption\r\n      return newOption;\r\n    });\r\n  }\r\n  // Handler - handleChange\r\n  handleChange = (event) => {\r\n    this.props.onChange(event.target.value, this.props.name);\r\n  }\r\n  // Handler - handleWheel\r\n  handleWheel = (event) => {\r\n    // If this input isn't focused, do nothing\r\n    if (event.target !== document.activeElement\r\n        && !event.target.parentElement.contains(document.activeElement)) { return; }\r\n    // If scroll wasn't up/down, do nothing\r\n    if (!event.deltaY) { return; }\r\n    // Otherwise, prevent default-scroll and process it\r\n    if (event.passive === true) { event.preventDefault(); }\r\n    // Find index of current selection\r\n    const options = this.options;\r\n    let currentIndex = options.findIndex(option => {\r\n      return option?.value === this?.props?.value \r\n    });\r\n    // Calculate new-index after scrolling\r\n    let newIndex = currentIndex;\r\n    do { \r\n      // Increment index\r\n      newIndex = event.deltaY > 0 ? newIndex+1 : newIndex-1;\r\n      // If new-index is out-of-range, do nothing\r\n      if (newIndex > options.length-1 || newIndex < -1) { return; }\r\n    } while (options?.[newIndex]?.disabled === true)\r\n    // Trigger change with value of the new-index\r\n    this.props.onChange(options?.[newIndex]?.value, this.props.name);\r\n  }\r\n  // Render\r\n  render() {\r\n    // Initialise\r\n    let dividerTest = new RegExp(/^[\\W]+$/); //Blank divider check\r\n    // Return\r\n    return(\r\n      <div className=\"field--container\">\r\n        { this.props.label && \r\n          <InputLabel name={this.props.name}\r\n                      label={this.props.label} />\r\n        }\r\n        <div className=\"field--main\">\r\n          <select className=\"field--input\" name={this.props.name}\r\n                  value={this.props.value ?? \"\"} \r\n                  onChange={this.handleChange}\r\n                  onWheel={this.handleWheel}>\r\n            <option key=\"-1\" value=\"\"></option> {/* Blank entry at start of list */}\r\n            {this.options.map((option, index) =>\r\n                <option key={index} value={option.value ?? \"\"} \r\n                        className={dividerTest.test(option.value) ? \"divider\" : null}\r\n                        disabled={dividerTest.test(option.value)}>\r\n                  {option.label ?? \"\"}\r\n                </option>\r\n            )}\r\n          </select>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n// ┌─────────────────┐\r\n// │  Input - Color  │\r\n// ╘═════════════════╛\r\nexport class ColorInput extends React.Component {\r\n  // DefaultProps\r\n  static defaultProps = {\r\n    \"value\": \"#808080\",\r\n    \"label\": true,\r\n  };\r\n  // Handler - Change\r\n  handleChange = (event) => {\r\n    // Store event trigger value\r\n    let value = event.target.value;\r\n    // Start/reset timer to buffer color-picker spam\r\n    clearTimeout(this.handleChange.timer); \r\n    this.handleChange.timer = setTimeout(() => {\r\n      this.props.onChange(value, this.props.name);\r\n    }, 125);\r\n  }\r\n  // Render\r\n  render() {\r\n    return(\r\n      <div className=\"field--container\">\r\n        { this.props.label && \r\n          <InputLabel name={this.props.name}\r\n                      label={this.props.label} />\r\n        }\r\n        <div className=\"field--main\">\r\n            <input type=\"color\" name={this.props.name}\r\n                   value={this.props.value ?? \"\"} onChange={this.handleChange} />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n// ┌──────────────────┐\r\n// │  Input - Matrix  │\r\n// ╘══════════════════╛\r\nexport class MatrixInput extends React.Component {\r\n  // DefaultProps\r\n  static defaultProps = {\r\n    \"value\": \"\",\r\n    \"label\": true,\r\n    \"step\": 0.1,\r\n    \"grid\": \"3x3\",\r\n    \"rowLabels\": false,\r\n    \"colLabels\": false,\r\n  }\r\n  // Handler - Change\r\n  handleChange = (value, name) => {\r\n    // Initialise\r\n    let newMatrix = this.stringToMatrix(this.props.value);\r\n    // Merge with an emptyMatrix to fill in missing values\r\n    newMatrix = this.mergeMatrix(this.emptyMatrix, newMatrix);\r\n    // If a value has been changed, update it\r\n    if (!(value == null) && !(name == null)) {\r\n      // Find which value changed\r\n      const rowCol = name.split(\"_\");\r\n      const iRow = parseInt(rowCol[0]); const iCol = parseInt(rowCol[1]);\r\n      // Update value that has changed\r\n      newMatrix[iRow][iCol] = value.toString();\r\n    }\r\n    // Convert back to string of numbers\r\n    newMatrix = this.matrixToString(newMatrix);\r\n    // Pass value back to container\r\n    this.props.onChange(newMatrix, this.props.name);\r\n  }\r\n  // Matrix properties\r\n  get rowCol() { return this.props.grid.match(/(\\d+)x(\\d+)/i); }\r\n  get rowCount() { return parseInt(this.rowCol?.[1] ?? 1); }\r\n  get colCount() { return parseInt(this.rowCol?.[2] ?? 1); }\r\n  // Matrix functions\r\n  get emptyMatrix() {\r\n    // Return emptyMatrix based on defined grid-size\r\n    return new Array(this.rowCount).fill(\"0\").map(() => new Array(this.colCount).fill(\"0\"));\r\n  }\r\n  mergeMatrix(baseMatrix, override) {\r\n    // Iterate every row, col to get values in baseMatrix\r\n    for (const [iRow, row] of baseMatrix.entries()) {\r\n      for (const [iCol] of row.entries()) {\r\n        // Use override value if it exists, otherwise use base value\r\n        baseMatrix[iRow][iCol] = override?.[iRow]?.[iCol] ?? baseMatrix?.[iRow]?.[iCol];\r\n      }\r\n    }\r\n    // Return\r\n    return baseMatrix;\r\n  }\r\n  matrixToString(matrix, delim) {\r\n    // Initialise\r\n    delim = delim ?? \" \";\r\n    // Convert to string\r\n    let matrixString = matrix.map(function join(a) { \r\n      return Array.isArray(a) ? a.map(join).join(delim) : a;\r\n    }).join(delim);\r\n    // Return\r\n    return matrixString;\r\n  }\r\n  stringToMatrix(matrixString) {\r\n    // If matrixString is empty; return empty array\r\n    if (matrixString === \"\") { return []; }\r\n    // Split string of values into an array\r\n    matrixString = matrixString ?? \"\";\r\n    let matrixArray = matrixString.toString().split(/\\s/);\r\n    // Calculate grid-size, default to specified row number\r\n    let numOfValues = matrixArray.length;\r\n    let rowCount = this.rowCount;\r\n    // If numOfValues is a square number, split into square\r\n    for (let divisor = 9; divisor > 0; divisor--) {\r\n      if (numOfValues === divisor * divisor\r\n          || numOfValues === divisor * (divisor+1)) {\r\n        rowCount = divisor;\r\n        break;\r\n      }\r\n    }\r\n    // Split matrix into rows\r\n    matrixArray = splitToRows(matrixArray, rowCount);\r\n    // Return\r\n    return matrixArray;\r\n    // Helper function (for splitting into nested-arrays)\r\n    function splitToRows(array, rowCount) {\r\n      let output = [];\r\n      for (let iRow = rowCount; iRow > 0; iRow--) {\r\n          output.push(array.splice(0, Math.ceil(array.length / iRow)));\r\n      }\r\n      return output;\r\n    }\r\n  }\r\n  // Render\r\n  render() {\r\n    // Convert prop value string to the base matrix\r\n    const propMatrix = this.stringToMatrix(this.props.value);\r\n    // Merge an empty matrix and propMatrix, to make sure it's correct size\r\n    const matrixValues = this.mergeMatrix(this.emptyMatrix, propMatrix);\r\n    // Process row/col labels\r\n    const rowLabels = this.props.rowLabels \r\n                      && this.props.rowLabels.map((label) => {\r\n      return <label className=\"matrix--label\">{label}</label>\r\n    })\r\n    const colLabels = this.props.colLabels \r\n                      && this.props.colLabels.map((label) => {\r\n      return <label className=\"matrix--label\">{label}</label>\r\n    })\r\n    // If labels on both axis, add blank spacer to start of colLabels\r\n    if (colLabels && rowLabels) {\r\n      colLabels.splice(0, 0, <label className=\"matrix--label\" />);\r\n    }\r\n    // Return\r\n    return(\r\n      <div className=\"field--container\">\r\n        { (this.props.label) && \r\n          <InputLabel name={this.props.name}\r\n                      label={this.props.label} />\r\n        }\r\n        <div className=\"field--main\">\r\n          <table className={\"field--matrix\"}>\r\n            <tbody>\r\n              { // Create matrix/grid of inputs\r\n                // Col labels\r\n                <React.Fragment>\r\n                  { (colLabels) && \r\n                    <tr key=\"label\"> \r\n                      { colLabels.map((colLabel, iCol) =>\r\n                          <td className=\"matrix--label\"\r\n                              key={`label_${iCol}`}>\r\n                            {colLabel}\r\n                          </td>\r\n                        )\r\n                      } \r\n                    </tr>\r\n                  }\r\n                  { // For each row in matrix\r\n                    matrixValues.map((row, iRow) => \r\n                      // Row labels\r\n                      <tr key={`${iRow}`}>\r\n                        { (rowLabels) && \r\n                          <td className=\"matrix--label\"\r\n                              key={`${iRow}_label`}>\r\n                            <label className=\"matrix--label\">{this.props.rowLabels[iRow]}</label>\r\n                          </td>\r\n                        }\r\n                        { // For each col in that row\r\n                          row.map((value, iCol) => \r\n                            <td key={`${iRow}_${iCol}`}>\r\n                              <NumberInput name={`${iRow}_${iCol}`}\r\n                                           label={false}\r\n                                           value={value ?? \"\"} \r\n                                           step={this.props.step}\r\n                                           onChange={this.handleChange} />\r\n                            </td>\r\n                          )\r\n                        }\r\n                      </tr>\r\n                    )\r\n                  }\r\n                </React.Fragment> \r\n              }\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n// ┌──────────┐\r\n// │  Export  │\r\n// ╘══════════╛\r\n// export default InputField;\r\n","// ┌───────────┐\r\n// │  Imports  │\r\n// ╘═══════════╛\r\nimport React from \"react\";\r\nimport svgElements from \"data/svg-elements\";\r\nimport * as InputFields from \"components/InputFields\";\r\n// ┌─────────────────────────────┐\r\n// │  EditElementForm Component  │\r\n// ╘═════════════════════════════╛\r\nexport class EditElementForm extends React.Component {\r\n  // DefaultProps\r\n  static defaultProps = {};\r\n  // Component - FormFields\r\n  get FormFields() {\r\n    // Map of Components by element-type\r\n    const componentMap = {\r\n      \"feBlend\": <FormFieldsFeBlend />,\r\n      \"feColorMatrix\": <FormFieldsFeColorMatrix />,\r\n      \"feComponentTransfer\": <FormFieldsFeComponentTransfer />,\r\n      \"feComposite\": <FormFieldsFeComposite />,\r\n      \"feConvolveMatrix\": <FormFieldsFeConvolveMatrix />,\r\n      \"feDiffuseLighting\": <FormFieldsFeDiffuseLighting />,\r\n      \"feDisplacementMap\": <FormFieldsFeDisplacementMap />,\r\n      \"feDropShadow\": <FormFieldsFeDropShadow />,\r\n      \"feFlood\": <FormFieldsFeFlood />,\r\n      \"feFuncR\": <FormFieldsFeFunc />,\r\n      \"feFuncG\": <FormFieldsFeFunc />,\r\n      \"feFuncB\": <FormFieldsFeFunc />,\r\n      \"feFuncA\": <FormFieldsFeFunc />,\r\n      \"feGaussianBlur\": <FormFieldsFeGaussianBlur />,\r\n      \"feImage\": <FormFieldsFeImage />,\r\n      \"feMerge\": <FormFieldsFeMerge />,\r\n      \"feMergeNode\": <FormFieldsFeMergeNode />,\r\n      \"feMorphology\": <FormFieldsFeMorphology />,\r\n      \"feOffset\": <FormFieldsFeOffset />,\r\n      \"feDistantLight\": <FormFieldsFeDistantLight />,\r\n      \"fePointLight\": <FormFieldsFePointLight />,\r\n      \"feSpecularLighting\": <FormFieldsFeSpecularLighting />,\r\n      \"feSpotLight\": <FormFieldsFeSpotLight />,\r\n      \"feTile\": <FormFieldsFeTile />,\r\n      \"feTurbulence\": <FormFieldsFeTurbulence />,\r\n    }\r\n    // Generate FormFields component by element-type\r\n    const FormFields = React.cloneElement(componentMap[this.props.element.type], {\r\n      ...this.props,\r\n      \"onChange\": this.handleChange,\r\n    });\r\n    // Return\r\n    return FormFields;\r\n  }\r\n  // Handler - handleChange\r\n  handleChange = (value, fieldName) => {\r\n    // If changing childElements, call different handler\r\n    if (fieldName === \"childElements\") {\r\n      this.handleChangeChildElements(value, fieldName);\r\n      return;\r\n    }\r\n    // Get existing field, or create new field\r\n    const newField = this.props.element.attributes?.[fieldName] \r\n                     ?? { \"name\": fieldName };\r\n    // Get the value from event, assign to field\r\n    newField.value = value ?? null;\r\n    // Replace field in element\r\n    const newElement = this.props.element;\r\n    newElement.attributes[fieldName] = newField;\r\n    // Pass event up to parent\r\n    this.props.onChangeElement(newElement, newElement.autoId ?? this.props.index);\r\n  }\r\n  // Handler - handleChangeChildElements\r\n  handleChangeChildElements = (childElements) => {\r\n    // Replace old childElements\r\n    const newElement = this.props.element;\r\n    newElement.childElements = childElements;\r\n    // Pass event up to parent\r\n    this.props.onChangeElement(newElement);\r\n  }\r\n  // Handler - handleDeleteElement\r\n  handleDeleteElement = (event) => {\r\n    // Pass event up to parent\r\n    this.props.onDeleteElement(this.props.element.autoId);\r\n  }\r\n  // Render\r\n  render() {\r\n    // If there's no element, don't render anything\r\n    if (!this.props.element) { return null; }\r\n    // Return\r\n    return(\r\n      <React.Fragment>\r\n        <div className=\"element--form\">\r\n          {/* Header - Title */}\r\n          <h3 className=\"element--header\">&lt;{this.props.element.type}&gt;</h3>\r\n          {/* Header -  Buttons */}\r\n          <div className=\"header--buttons\">\r\n            { (this.props.element.url) &&\r\n              <a className=\"header--link\"\r\n                 href={this.props.element.url} target=\"_blank\" rel=\"noopener noreferrer\"\r\n                 title={`MDN Reference for <${this.props.element.type}>`}>\r\n                <button className=\"header--button\">\r\n                  <i className=\"fas fa-info-circle fa-fw\"></i>\r\n                </button>\r\n              </a>\r\n            }\r\n            { (this.props.onDeleteElement) &&\r\n              <button className=\"header--button\"\r\n                      title=\"Delete Element\"\r\n                      onClick={this.handleDeleteElement}>\r\n                <i className=\"fas fa-trash-alt fa-fw\"></i>\r\n              </button> \r\n            }\r\n          </div>\r\n          <hr className=\"break\" />\r\n          {/* Form Fields */}\r\n          <ul className=\"element--fields\">\r\n            { this.FormFields }\r\n          </ul>\r\n        </div>\r\n      </React.Fragment>  \r\n    );\r\n  }\r\n}\r\n// ┌────────────────────────────────┐\r\n// │  EditElementIdsForm Component  │\r\n// ╘════════════════════════════════╛\r\nexport class EditElementIdsForm extends React.Component {\r\n  // DefaultProps\r\n  static defaultProps = {\r\n    \"selected\": false,\r\n  };\r\n  // Property - idFieldCount\r\n  get idFieldCount() {\r\n    // Map of idFieldCount by element-type\r\n    const idFieldCountMap = {\r\n      \"feBlend\": 2, \"feColorMatrix\": 1,\r\n      \"feComponentTransfer\": 1,\r\n      \"feComposite\": 2, \"feConvolveMatrix\": 1,\r\n      \"feDiffuseLighting\": 1, \"feDisplacementMap\": 2,\r\n      \"feDropShadow\": 1, \"feFlood\": 0,\r\n      \"feGaussianBlur\": 1, \"feImage\": 0,\r\n      \"feMerge\": 0, \"feMorphology\": 1,\r\n      \"feOffset\": 1, \"feSpecularLighting\": 1,\r\n      \"feTile\": 1, \"feTurbulence\": 0,\r\n    }\r\n    // Match idFieldCount to element-type\r\n    let idFieldCount = idFieldCountMap?.[this.props.element.type] ?? 0;\r\n    // Return\r\n    return idFieldCount;\r\n  }\r\n  // Handlers - handleSelectionClick\r\n  handleSelectionClick = (event) => {\r\n    // If already selected, do nothing\r\n    if (this.props.selected) { return; }\r\n    // Otherwise, pass event up to parent\r\n    this.props.onSelectElement(this.props.element.autoId);\r\n  }\r\n  // Handler - handleChange\r\n  handleChange = (value, fieldName) => {\r\n    // Get existing field, or create new field\r\n    const newField = this.props.element.attributes?.[fieldName] \r\n                     ?? { \"name\": fieldName };\r\n    // Get the value from event, assign to field\r\n    newField.value = value ?? null;\r\n    // Replace field in element\r\n    const newElement = this.props.element;\r\n    newElement.attributes[fieldName] = newField;\r\n    // Pass event up to parent\r\n    this.props.onChangeElement(newElement, this.props.element.autoId);\r\n  }\r\n  // Handlers - handleMoveElement\r\n  handleMoveElement = (moveDirection) => {\r\n    // If no move direction, ignore event\r\n    if (!moveDirection) { return; }\r\n    // Otherwise, pass event up to parent\r\n    this.props.onMoveElement(moveDirection, this.props.element.autoId);\r\n  }\r\n  // Handlers - handleMoveElementUp\r\n  handleMoveElementUp = (event) => { this.handleMoveElement(-1); }\r\n  // Handlers - handleMoveElementDown\r\n  handleMoveElementDown = (event) => { this.handleMoveElement(1); }\r\n  // Render\r\n  render() {\r\n    // Return\r\n    return(\r\n      <React.Fragment>\r\n        <div className={`filter--element ${this.props.selected}`}\r\n             onClick={this.handleSelectionClick}>\r\n          {/* Header - Title */}\r\n          <h3 className=\"element--header\">&lt;{this.props.element.type}&gt;</h3>\r\n          {/* Header -  Buttons */}\r\n          <div className=\"header--buttons\">\r\n            <button className=\"header--button\"\r\n                    title=\"Move Element Up\"\r\n                    onClick={this.handleMoveElementUp}>\r\n              <i className=\"fas fa-chevron-up fa-fw\"></i>\r\n            </button>\r\n            <button className=\"header--button\"\r\n                    title=\"Move Element Down\"\r\n                    onClick={this.handleMoveElementDown}>\r\n              <i className=\"fas fa-chevron-down fa-fw\"></i>\r\n            </button>\r\n          </div>\r\n          <hr className=\"break\" />\r\n          {/* Form Fields */}\r\n          <ul className=\"element--fields\">\r\n            <FormFieldsIds {...this.props}\r\n                           onChange={this.handleChange}\r\n                           result={this.idFieldCount >= 0}\r\n                           in={this.idFieldCount >= 1}\r\n                           in2={this.idFieldCount >= 2} />\r\n          </ul>\r\n        </div>\r\n      </React.Fragment>  \r\n    );\r\n  }\r\n}\r\n// ┌───────────────────────────────┐\r\n// │  FormFieldsFeBlend Component  │\r\n// ╘═══════════════════════════════╛\r\nclass FormFieldsFeBlend extends React.Component {\r\n  // DefaultProps\r\n  static defaultProps = {};\r\n  // Property - modeOptions\r\n  modeOptions = [\r\n    \"normal\", \r\n    \"————\", \"darken\", \"multiply\", \"color-burn\", \r\n    \"————\", \"lighten\", \"screen\", \"color-dodge\", \r\n    \"————\", \"overlay\", \"soft-light\", \"hard-light\", \r\n    \"————\", \"difference\", \"exclusion\", \r\n    \"————\", \"hue\", \"saturation\", \"color\", \"luminosity\", \r\n  ];\r\n  // Render\r\n  render() {\r\n    // Return\r\n    return(\r\n      <React.Fragment>\r\n        <FormFieldsIds {...this.props} \r\n                       result={true}\r\n                       in={true} \r\n                       in2={true} />\r\n        <li className={`element--field`} key={`mode`}>\r\n          <InputFields.ListInput name=\"mode\"\r\n                                 value={this.props.element.attributes?.mode?.value}\r\n                                 options={this.modeOptions}\r\n                                 onChange={this.props.onChange} />\r\n        </li>\r\n        <li className={`element--field`} key={`color-interpolation-filters`}>\r\n          <InputFields.ListInput name=\"color-interpolation-filters\"\r\n                                 label=\"color-interpolation-mode\"\r\n                                 value={this.props.element.attributes?.[\"color-interpolation-filters\"]?.value}\r\n                                 options={[\"linearRGB\",\"sRGB\"]}\r\n                                 onChange={this.props.onChange} />\r\n        </li>\r\n        <FormFieldsPosition {...this.props} />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n// ┌─────────────────────────────────────┐\r\n// │  FormFieldsFeColorMatrix Component  │\r\n// ╘═════════════════════════════════════╛\r\nclass FormFieldsFeColorMatrix extends React.Component {\r\n  // DefaultProps\r\n  static defaultProps = {};\r\n  // Handler - TypeChange\r\n  handleTypeChange = (value, fieldName) => {\r\n    // Defaults for the 'values' field\r\n    const valuesFieldDefaults = {\r\n      \"matrix\": \"1 0 0 0 0\\n0 1 0 0 0\\n0 0 1 0 0\\n0 0 0 1 0\",\r\n      \"saturate\": 1,\r\n      \"hueRotate\": 0,\r\n    }\r\n    // Reset values field, and pass change of type up to parent\r\n    this.props.onChange(valuesFieldDefaults[value] ?? null, \"values\");\r\n    this.props.onChange(value, fieldName);\r\n  }\r\n  // Render\r\n  render() {\r\n    // Return\r\n    return(\r\n      <React.Fragment>\r\n        <FormFieldsIds {...this.props} \r\n                       result={true}\r\n                       in={true} />\r\n        <li className={`element--field`} key={`type`}>\r\n          <InputFields.ListInput name=\"type\"\r\n                                 value={this.props.element.attributes?.type?.value}\r\n                                 options={[\"matrix\", \"saturate\",\r\n                                           \"hueRotate\", \"luminanceToAlpha\"]}\r\n                                 onChange={this.handleTypeChange} />\r\n        </li>\r\n        { (this.props.element.attributes?.type?.value === \"matrix\") &&\r\n        <li className={`element--field`} key={`values`}>\r\n          <InputFields.MatrixInput name=\"values\"\r\n                                   value={this.props.element.attributes?.values?.value}\r\n                                   grid=\"4x5\"\r\n                                   rowLabels={[\"R\", \"G\", \"B\", \"A\"]}\r\n                                   colLabels={[\"R\", \"G\", \"B\", \"A\", \"W\"]}\r\n                                   onChange={this.props.onChange} />\r\n        </li>\r\n        }\r\n        { (this.props.element.attributes?.type?.value === \"saturate\") &&\r\n        <li className={`element--field`} key={`values`}>\r\n          <InputFields.NumberInput name=\"values\"\r\n                                   value={this.props.element.attributes?.values?.value\r\n                                          ?? 1}\r\n                                   range={true}\r\n                                   min=\"0\" max=\"2\" step=\"0.05\"\r\n                                   onChange={this.props.onChange} />\r\n        </li>\r\n        }\r\n        { (this.props.element.attributes?.type?.value === \"hueRotate\") &&\r\n        <li className={`element--field`} key={`values`}>\r\n          <InputFields.NumberInput name=\"values\"\r\n                                   value={this.props.element.attributes?.values?.value\r\n                                          ?? 0}\r\n                                   range={true}\r\n                                   min=\"0\" max=\"360\" step=\"5\"\r\n                                   onChange={this.props.onChange} />\r\n        </li>\r\n        }\r\n        <FormFieldsPosition {...this.props} />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n// ┌───────────────────────────────────────────┐\r\n// │  FormFieldsFeComponentTransfer Component  │\r\n// ╘═══════════════════════════════════════════╛\r\nclass FormFieldsFeComponentTransfer extends React.Component {\r\n  // DefaultProps\r\n  static defaultProps = {};\r\n  // Render\r\n  render() {\r\n    // Return\r\n    return(\r\n      <React.Fragment>\r\n        <FormFieldsIds {...this.props} \r\n                       result={true}\r\n                       in={true} />\r\n        <FormFieldsPosition {...this.props} />\r\n        <FormFieldsChildElements childElements={this.props.element?.childElements}\r\n                                 label=\"components\"\r\n                                 fixedChildElements=\"true\"\r\n                                 onChange={this.props.onChange} />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n// ┌───────────────────────────────────┐\r\n// │  FormFieldsFeComposite Component  │\r\n// ╘═══════════════════════════════════╛\r\nclass FormFieldsFeComposite extends React.Component {\r\n  // DefaultProps\r\n  static defaultProps = {};\r\n  // Handler - handleOperatorChange\r\n  handleOperatorChange = (value, fieldName) => {\r\n    // If operator is arithmetic, set K fields to defaults\r\n    if (value === \"arithmetic\") {\r\n      this.props.onChange(svgElements?.feComposite?.attributes?.k1?.value ?? 0, \"k1\");\r\n      this.props.onChange(svgElements?.feComposite?.attributes?.k2?.value ?? 0, \"k2\");\r\n      this.props.onChange(svgElements?.feComposite?.attributes?.k3?.value ?? 0, \"k3\");\r\n      this.props.onChange(svgElements?.feComposite?.attributes?.k4?.value ?? 0, \"k4\");\r\n    }\r\n    // Otherwise, clear K fields\r\n    else {\r\n      this.props.onChange(null, \"k1\");\r\n      this.props.onChange(null, \"k2\");\r\n      this.props.onChange(null, \"k3\");\r\n      this.props.onChange(null, \"k4\");\r\n    }\r\n    // Pass change of operator up to parent\r\n    this.props.onChange(value, fieldName);\r\n  }\r\n  // Render\r\n  render() {\r\n    // Return\r\n    return(\r\n      <React.Fragment>\r\n        <FormFieldsIds {...this.props} \r\n                       result={true}\r\n                       in={true}\r\n                       in2={true} />\r\n        <li className={`element--field`} key={`operator`}>\r\n          <InputFields.ListInput name=\"operator\"\r\n                                 value={this.props.element.attributes?.operator?.value}\r\n                                 options={[\"over\", \"in\", \"out\",\r\n                                           \"atop\", \"xor\", \"lighter\",\r\n                                           \"arithmetic\"]}\r\n                                 onChange={this.handleOperatorChange} />\r\n        </li>\r\n        { (this.props.element.attributes?.operator?.value === \"arithmetic\") &&\r\n          <li className={`element--field`} key={`k1_k2_k3_k4`}>\r\n            <InputFields.NumberInput name=\"k1\"\r\n                                     value={this.props.element.attributes?.k1?.value}\r\n                                     step=\"0.1\"\r\n                                     onChange={this.props.onChange} />\r\n            <InputFields.NumberInput name=\"k2\"\r\n                                     value={this.props.element.attributes?.k2?.value}\r\n                                     onChange={this.props.onChange} />\r\n            <InputFields.NumberInput name=\"k3\"\r\n                                     value={this.props.element.attributes?.k3?.value}\r\n                                     onChange={this.props.onChange} />\r\n            <InputFields.NumberInput name=\"k4\"\r\n                                     value={this.props.element.attributes?.k4?.value}\r\n                                     onChange={this.props.onChange} />\r\n          </li>\r\n        }\r\n        <li className={`element--field`} key={`color-interpolation-filters`}>\r\n          <InputFields.ListInput name=\"color-interpolation-filters\"\r\n                                 label=\"color-interpolation-mode\"\r\n                                 value={this.props.element.attributes?.[\"color-interpolation-filters\"]?.value}\r\n                                 options={[\"linearRGB\",\"sRGB\"]}\r\n                                 onChange={this.props.onChange} />\r\n        </li>\r\n        <FormFieldsPosition {...this.props} />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n// ┌────────────────────────────────────────┐\r\n// │  FormFieldsFeConvolveMatrix Component  │\r\n// ╘════════════════════════════════════════╛\r\nclass FormFieldsFeConvolveMatrix extends React.Component {\r\n  // DefaultProps\r\n  static defaultProps = {};\r\n  // Render\r\n  render() {\r\n    // Return\r\n    return(\r\n      <React.Fragment>\r\n        <FormFieldsIds {...this.props} \r\n                       result={true}\r\n                       in={true} />\r\n        <li className={`element--field`} key={`order`}>\r\n          <InputFields.NumberInput name=\"order\"\r\n                                   value={this.props.element.attributes?.order?.value}\r\n                                   range={true}\r\n                                   int={true}\r\n                                   min=\"1\" max=\"9\" step=\"1\"\r\n                                   onChange={this.props.onChange} />\r\n        </li>\r\n        <li className={`element--field`} key={`kernelMatrix`}>\r\n          <InputFields.MatrixInput name=\"kernelMatrix\"\r\n                                   grid={this.props.element.attributes?.order?.value + \"x\" +\r\n                                         this.props.element.attributes?.order?.value}\r\n                                   value={this.props.element.attributes?.kernelMatrix?.value}\r\n                                   onChange={this.props.onChange} />\r\n        </li>\r\n        <li className={`element--field`} key={`divisor`}>\r\n          <InputFields.NumberInput name=\"divisor\"\r\n                                   value={this.props.element.attributes?.divisor?.value}\r\n                                   onChange={this.props.onChange} />\r\n        </li>\r\n        <li className={`element--field`} key={`bias`}>\r\n          <InputFields.NumberInput name=\"bias\"\r\n                                   value={this.props.element.attributes?.bias?.value}\r\n                                   onChange={this.props.onChange} />\r\n        </li>\r\n        <li className={`element--field`} key={`targetX_targetY`}>\r\n          <InputFields.NumberInput name=\"targetX\"\r\n                                   value={this.props.element.attributes?.targetX?.value}\r\n                                   onChange={this.props.onChange} />\r\n          <InputFields.NumberInput name=\"targetY\"\r\n                                   value={this.props.element.attributes?.targetY?.value}\r\n                                   onChange={this.props.onChange} />\r\n        </li>\r\n        <li className={`element--field`} key={`edgeMode`}>\r\n          <InputFields.ListInput name=\"edgeMode\"\r\n                                   value={this.props.element.attributes?.edgeMode?.value}\r\n                                   options={[\"duplicate\", \"wrap\", \"none\"]}\r\n                                   onChange={this.props.onChange} />\r\n        </li>\r\n        <li className={`element--field`} key={`preserveAlpha`}>\r\n          <InputFields.BooleanInput name=\"preserveAlpha\"\r\n                                    tristate={true}\r\n                                    value={this.props.element.attributes?.preserveAlpha?.value}\r\n                                    onChange={this.props.onChange} />\r\n        </li>\r\n        <FormFieldsPosition {...this.props} />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n// ┌─────────────────────────────────────────┐\r\n// │  FormFieldsFeDiffuseLighting Component  │\r\n// ╘═════════════════════════════════════════╛\r\nclass FormFieldsFeDiffuseLighting extends React.Component {\r\n  // DefaultProps\r\n  static defaultProps = {};\r\n  // Render\r\n  render() {\r\n    // Return\r\n    return(\r\n      <React.Fragment>\r\n        <FormFieldsIds {...this.props} \r\n                       result={true}\r\n                       in={true} />\r\n        <li className={`element--field`} key={`surfaceScale`}>\r\n          <InputFields.NumberInput name=\"surfaceScale\"\r\n                                   value={this.props.element.attributes?.surfaceScale?.value}\r\n                                   onChange={this.props.onChange} />\r\n        </li>\r\n        <li className={`element--field`} key={`diffuseConstant`}>\r\n          <InputFields.NumberInput name=\"diffuseConstant\"\r\n                                   value={this.props.element.attributes?.diffuseConstant?.value}\r\n                                   step=\"0.1\"\r\n                                   onChange={this.props.onChange} />\r\n        </li>\r\n        <FormFieldsPosition {...this.props} />\r\n        <FormFieldsChildElements childElements={this.props.element.childElements}\r\n                                 label=\"lights\"\r\n                                 options={[\"feDistantLight\", \"fePointLight\", \"feSpotLight\"]}\r\n                                 onChange={this.props.onChange} />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n// ┌─────────────────────────────────────────┐\r\n// │  FormFieldsFeDisplacementMap Component  │\r\n// ╘═════════════════════════════════════════╛\r\nclass FormFieldsFeDisplacementMap extends React.Component {\r\n  // DefaultProps\r\n  static defaultProps = {};\r\n  // Render\r\n  render() {\r\n    // Return\r\n    return(\r\n      <React.Fragment>\r\n        <FormFieldsIds {...this.props} \r\n                       result={true}\r\n                       in={true}\r\n                       in2={true} />\r\n        <li className={`element--field`} key={`scale`}>\r\n          <InputFields.NumberInput name=\"scale\"\r\n                                   value={this.props.element.attributes?.scale?.value}\r\n                                   onChange={this.props.onChange} />\r\n        </li>\r\n        <li className={`element--field`} key={`xChannelSelector_yChannelSelector`}>\r\n          <InputFields.ListInput name=\"xChannelSelector\"\r\n                                 value={this.props.element.attributes?.xChannelSelector?.value}\r\n                                 options={[\"R\", \"G\", \"B\", \"A\"]}\r\n                                 onChange={this.props.onChange} />\r\n          <InputFields.ListInput name=\"yChannelSelector\"\r\n                                 value={this.props.element.attributes?.yChannelSelector?.value}\r\n                                 options={[\"R\", \"G\", \"B\", \"A\"]}\r\n                                 onChange={this.props.onChange} />\r\n        </li>\r\n        <FormFieldsPosition {...this.props} />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n// ┌────────────────────────────────────┐\r\n// │  FormFieldsFeDropShadow Component  │\r\n// ╘════════════════════════════════════╛\r\nclass FormFieldsFeDropShadow extends React.Component {\r\n  // DefaultProps\r\n  static defaultProps = {};\r\n  // Render\r\n  render() {\r\n    // Return\r\n    return(\r\n      <React.Fragment>\r\n        <FormFieldsIds {...this.props} \r\n                       result={true} \r\n                       in={true} />\r\n        <li className={`element--field`} key={`dx_dy`}>\r\n          <InputFields.NumberInput name=\"dx\"\r\n                                   value={this.props.element.attributes?.dx?.value}\r\n                                   onChange={this.props.onChange} />\r\n          <InputFields.NumberInput name=\"dy\"\r\n                                   value={this.props.element.attributes?.dy?.value}\r\n                                   onChange={this.props.onChange} />\r\n        </li>\r\n        <li className={`element--field`} key={`stdDeviation`}>\r\n          <InputFields.NumberInput name=\"stdDeviation\"\r\n                                   value={this.props.element.attributes?.stdDeviation?.value}\r\n                                   onChange={this.props.onChange} />\r\n        </li>\r\n        <FormFieldsPosition {...this.props} />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n// ┌───────────────────────────────┐\r\n// │  FormFieldsFeFlood Component  │\r\n// ╘═══════════════════════════════╛\r\nclass FormFieldsFeFlood extends React.Component {\r\n  // DefaultProps\r\n  static defaultProps = {};\r\n  // Render\r\n  render() {\r\n    // Return\r\n    return(\r\n      <React.Fragment>\r\n        <FormFieldsIds {...this.props}\r\n                       result={true} />\r\n        <li className={`element--field`} key={`flood-color`}>\r\n          <InputFields.ColorInput name=\"flood-color\"\r\n                                  value={this.props.element.attributes[\"flood-color\"].value}\r\n                                  onChange={this.props.onChange} />\r\n        </li>\r\n        <li className={`element--field`} key={`flood-opacity`}>\r\n          <InputFields.NumberInput name=\"flood-opacity\"\r\n                                   range={true}\r\n                                   min=\"0\" max=\"1\" step=\"0.01\"\r\n                                   value={this.props.element.attributes[\"flood-opacity\"].value}\r\n                                   onChange={this.props.onChange} />\r\n        </li>\r\n        <FormFieldsPosition {...this.props} />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n// ┌──────────────────────────────────────┐\r\n// │  FormFieldsFeGaussianBlur Component  │\r\n// ╘══════════════════════════════════════╛\r\nclass FormFieldsFeGaussianBlur extends React.Component {\r\n  // DefaultProps\r\n  static defaultProps = {};  \r\n  // Render\r\n  render() {\r\n    // Return\r\n    return(\r\n      <React.Fragment>\r\n        <FormFieldsIds {...this.props}\r\n                       result={true}\r\n                       in={true} />\r\n        <li className={`element--field`} key={`stdDeviation`}>\r\n          <InputFields.NumberInput name=\"stdDeviation\"\r\n                                   value={this.props.element.attributes?.stdDeviation?.value}\r\n                                   onChange={this.props.onChange} />\r\n        </li>\r\n        <li className={`element--field`} key={`edgeMode`}>\r\n          <InputFields.ListInput name=\"edgeMode\"\r\n                                 value={this.props.element.attributes?.edgeMode?.value}\r\n                                 options={[\"duplicate\", \"wrap\", \"none\"]}\r\n                                 onChange={this.props.onChange} />\r\n        </li>\r\n        <FormFieldsPosition {...this.props} />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n// ┌───────────────────────────────┐\r\n// │  FormFieldsFeImage Component  │\r\n// ╘═══════════════════════════════╛\r\nclass FormFieldsFeImage extends React.Component {\r\n  // DefaultProps\r\n  static defaultProps = {};\r\n  // Property - preserveAspectRatioAlign\r\n  get preserveAspectRatioAlign() {\r\n    // Retrieve alignment value from string\r\n    const baseValue = this.props.element.attributes.preserveAspectRatio.value ?? \"\";\r\n    return baseValue.match(/(none|(?:[x](?:Min|Mid|Max)[y](?:Min|Mid|Max)))/i)?.[1] ?? \"\";\r\n  }\r\n  // Property - preserveAspectRatioCrop\r\n  get preserveAspectRatioCrop() {\r\n    // Retrieve alignment value from string\r\n    const baseValue = this.props.element.attributes.preserveAspectRatio.value ?? \"\";\r\n    return baseValue.match(/(meet|slice)/i)?.[1] ?? \"\";\r\n  }\r\n  // Handler - handleAspectRatioChange\r\n  handleAspectRatioChange = (value, fieldName) => {\r\n    // Combine fields\r\n    let newValue = \"\";\r\n    if (fieldName === \"aspectRatioAlign\") {\r\n      newValue = `${value} ${this.preserveAspectRatioCrop}`;\r\n    }\r\n    else if (fieldName === \"aspectRatioCrop\") {\r\n      newValue = `${this.preserveAspectRatioAlign} ${value}`;\r\n    }\r\n    newValue = newValue.trim();\r\n    // Pass update to parent\r\n    this.props.onChange(newValue, \"preserveAspectRatio\");\r\n  }\r\n  // Render\r\n  render() {\r\n    // Return\r\n    return(\r\n      <React.Fragment>\r\n        <FormFieldsIds {...this.props}\r\n                       result={true} />\r\n        <li className={`element--field`} key={`href`}>\r\n          <InputFields.TextInput name=\"href\"\r\n                                 value={this.props.element.attributes?.href?.value}\r\n                                 onChange={this.props.onChange} />\r\n        </li>\r\n        <li className={`element--field`} key={`preserveAspectRatio`}>\r\n          <InputFields.ListInput name=\"aspectRatioAlign\"\r\n                                 value={this.preserveAspectRatioAlign}\r\n                                 options={[\"none\",\r\n                                           \"xMinYMin\", \"xMidYMin\", \"xMaxYMin\",\r\n                                           \"xMinYMid\", \"xMidYMid\", \"xMaxYMid\",\r\n                                           \"xMinYMax\", \"xMidYMax\", \"xMaxYMax\"]}\r\n                                 onChange={this.handleAspectRatioChange} />\r\n          <InputFields.ListInput name=\"aspectRatioCrop\"\r\n                                 value={this.preserveAspectRatioCrop}\r\n                                 options={[\"meet\", \"slice\"]}\r\n                                 onChange={this.handleAspectRatioChange} />\r\n        </li>\r\n        <FormFieldsPosition {...this.props} />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n// ┌───────────────────────────────┐\r\n// │  FormFieldsFeMerge Component  │\r\n// ╘═══════════════════════════════╛\r\nclass FormFieldsFeMerge extends React.Component {\r\n  // DefaultProps\r\n  static defaultProps = {};\r\n  // Render\r\n  render() {\r\n    // Return\r\n    return(\r\n      <React.Fragment>\r\n        <FormFieldsIds {...this.props}\r\n                       result={true} />\r\n        <FormFieldsPosition {...this.props} />\r\n        <FormFieldsChildElements childElements={this.props.element.childElements}\r\n                                 label=\"nodes\"\r\n                                 elementIds={this.props.elementIds}\r\n                                 value=\"feMergeNode\"\r\n                                 options={[\"feMergeNode\"]}\r\n                                 onChange={this.props.onChange} />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n// ┌────────────────────────────────────┐\r\n// │  FormFieldsFeMorphology Component  │\r\n// ╘════════════════════════════════════╛\r\nclass FormFieldsFeMorphology extends React.Component {\r\n  // DefaultProps\r\n  static defaultProps = {};\r\n  // Render\r\n  render() {\r\n    // Return\r\n    return(\r\n      <React.Fragment>\r\n        <FormFieldsIds {...this.props}\r\n                       result={true}\r\n                       in={true} />\r\n        <li className={`element--field`} key={`operator`}>\r\n          <InputFields.ListInput name=\"operator\"\r\n                                 value={this.props.element.attributes?.operator?.value}\r\n                                 options={[\"erode\", \"dilate\"]}\r\n                                 onChange={this.props.onChange} />\r\n        </li>\r\n        <li className={`element--field`} key={`radius`}>\r\n          <InputFields.NumberInput name=\"radius\"\r\n                                   value={this.props.element.attributes?.radius?.value}\r\n                                   onChange={this.props.onChange} />\r\n        </li>\r\n        <FormFieldsPosition {...this.props} />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n// ┌────────────────────────────────┐\r\n// │  FormFieldsFeOffset Component  │\r\n// ╘════════════════════════════════╛\r\nclass FormFieldsFeOffset extends React.Component {\r\n  // DefaultProps\r\n  static defaultProps = {};\r\n  // Render\r\n  render() {\r\n    // Return\r\n    return(\r\n      <React.Fragment>\r\n        <FormFieldsIds {...this.props}\r\n                       result={true}\r\n                       in={true} />\r\n        <li className={`element--field`} key={`dx_dy`}>\r\n          <InputFields.NumberInput name=\"dx\"\r\n                                   value={this.props.element.attributes?.dx?.value}\r\n                                   onChange={this.props.onChange} />\r\n          <InputFields.NumberInput name=\"dy\"\r\n                                   value={this.props.element.attributes?.dy?.value}\r\n                                   onChange={this.props.onChange} />\r\n        </li>\r\n        <FormFieldsPosition {...this.props} />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n// ┌──────────────────────────────────────────┐\r\n// │  FormFieldsFeSpecularLighting Component  │\r\n// ╘══════════════════════════════════════════╛\r\nclass FormFieldsFeSpecularLighting extends React.Component {\r\n  // DefaultProps\r\n  static defaultProps = {};\r\n  // Render\r\n  render() {\r\n    // Return\r\n    return(\r\n      <React.Fragment>\r\n        <FormFieldsIds {...this.props}\r\n                       result={true}\r\n                       in={true} />\r\n        <li className={`element--field`} key={`surfaceScale`}>\r\n          <InputFields.NumberInput name=\"surfaceScale\"\r\n                                   value={this.props.element.attributes?.surfaceScale?.value}\r\n                                   onChange={this.props.onChange} />\r\n        </li>\r\n        <li className={`element--field`} key={`specularConstant`}>\r\n          <InputFields.NumberInput name=\"specularConstant\"\r\n                                   value={this.props.element.attributes?.specularConstant?.value}\r\n                                   step=\"0.1\"\r\n                                   onChange={this.props.onChange} />\r\n        </li>\r\n        <li className={`element--field`} key={`specularExponent`}>\r\n          <InputFields.NumberInput name=\"specularExponent\"\r\n                                   value={this.props.element.attributes?.specularExponent?.value}\r\n                                   step=\"1\"\r\n                                   onChange={this.props.onChange} />\r\n        </li>\r\n        <FormFieldsPosition {...this.props} />\r\n        <FormFieldsChildElements childElements={this.props.element.childElements}\r\n                                 label=\"lights\"\r\n                                 options={[\"feDistantLight\", \"fePointLight\", \"feSpotLight\"]}\r\n                                 onChange={this.props.onChange} />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n// ┌──────────────────────────────┐\r\n// │  FormFieldsFeTile Component  │\r\n// ╘══════════════════════════════╛\r\nclass FormFieldsFeTile extends React.Component {\r\n  // DefaultProps\r\n  static defaultProps = {};\r\n  // Render\r\n  render() {\r\n    // Return\r\n    return(\r\n      <React.Fragment>\r\n        <FormFieldsIds {...this.props} \r\n                       result={true}\r\n                       in={true} />\r\n        <FormFieldsPosition {...this.props} />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n// ┌────────────────────────────────────┐\r\n// │  FormFieldsFeTurbulence Component  │\r\n// ╘════════════════════════════════════╛\r\nclass FormFieldsFeTurbulence extends React.Component {\r\n  // DefaultProps\r\n  static defaultProps = {};\r\n  // Property - baseFrequencyX\r\n  get baseFrequencyX() {\r\n    // Retrieve frequency values from string\r\n    const baseValue = this.props.element.attributes.baseFrequency.value.toString() ?? \"\";\r\n    return baseValue.match(/^([\\d.]+)/)?.[1] ?? \"\";\r\n  }\r\n  // Property - baseFrequencyY\r\n  get baseFrequencyY() {\r\n    // Retrieve frequency values from string\r\n    const baseValue = this.props.element.attributes.baseFrequency.value.toString() ?? \"\";\r\n    return baseValue.match(/^[\\d.]+[\\s]+([\\d.]+)/)?.[1] ?? \"\";\r\n  }\r\n  // Handler - handleBaseFrequencyChange\r\n  handleBaseFrequencyChange = (value, fieldName) => {\r\n    // Combine fields\r\n    let newValue = \"\";\r\n    if (fieldName === \"baseFrequencyX\") {\r\n      newValue = `${value} ${this.baseFrequencyY}`;\r\n    }\r\n    else if (fieldName === \"baseFrequencyY\") {\r\n      newValue = `${this.baseFrequencyX} ${value}`;\r\n    }\r\n    newValue = newValue.trim();\r\n    // Pass update to parent\r\n    this.props.onChange(newValue, \"baseFrequency\");\r\n  }\r\n  // Render\r\n  render() {\r\n    // Return\r\n    return(\r\n      <React.Fragment>\r\n        <FormFieldsIds {...this.props} \r\n                       result={true} />\r\n          <li className={`element--field`} key={`seed`}>\r\n            <InputFields.NumberInput name=\"seed\"\r\n                                     value={this.props.element.attributes?.seed?.value}\r\n                                     onChange={this.props.onChange} />\r\n          </li>\r\n          <li className={`element--field`} key={`type`}>\r\n            <InputFields.ListInput name=\"type\"\r\n                                   value={this.props.element.attributes?.type?.value}\r\n                                   options={[\"turbulence\", \"fractalNoise\"]}\r\n                                   onChange={this.props.onChange} />\r\n          </li>\r\n          <li className={`element--field`} key={`numOctaves`}>\r\n            <InputFields.NumberInput name=\"numOctaves\"\r\n                                     value={this.props.element.attributes?.numOctaves?.value}\r\n                                     int={true}\r\n                                     onChange={this.props.onChange} />\r\n          </li>\r\n          <li className={`element--field`} key={`baseFrequencyX_baseFrequencyY`}>\r\n            <InputFields.NumberInput name=\"baseFrequencyX\"\r\n                                     value={this.baseFrequencyX}\r\n                                     range={true}\r\n                                     min=\"0\" max=\"1\" step=\"0.005\"\r\n                                     onChange={this.handleBaseFrequencyChange} />\r\n            <InputFields.NumberInput name=\"baseFrequencyY\"\r\n                                     value={this.baseFrequencyY}\r\n                                     range={true}\r\n                                     min=\"0\" max=\"1\" step=\"0.005\"\r\n                                     onChange={this.handleBaseFrequencyChange} />\r\n          </li>\r\n          <li className={`element--field`} key={`stitchTiles`}>\r\n            <InputFields.ListInput name=\"stitchTiles\"\r\n                                   value={this.props.element.attributes?.stitchTiles?.value}\r\n                                   options={[\"noStitch\",\"stitch\"]}\r\n                                   onChange={this.props.onChange} />\r\n          </li>\r\n        <FormFieldsPosition {...this.props} />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n// ┌──────────────────────────────────────┐\r\n// │  FormFieldsFeDistantLight Component  │\r\n// ╘══════════════════════════════════════╛\r\nclass FormFieldsFeDistantLight extends React.Component {\r\n  // DefaultProps\r\n  static defaultProps = {};\r\n  // Render\r\n  render() {\r\n    // Return\r\n    return(\r\n      <React.Fragment>\r\n        <li className={`element--field`} key={`azimuth`}>\r\n          <InputFields.NumberInput name=\"azimuth\"\r\n                                   value={this.props.element.attributes?.azimuth?.value\r\n                                          ?? 225}\r\n                                   range={true}\r\n                                   min=\"0\" max=\"360\" step=\"15\"\r\n                                   onChange={this.props.onChange} />\r\n        </li>\r\n        <li className={`element--field`} key={`elevation`}>\r\n          <InputFields.NumberInput name=\"elevation\"\r\n                                   value={this.props.element.attributes?.elevation?.value\r\n                                          ?? 45}\r\n                                   range={true}\r\n                                   min=\"0\" max=\"90\" step=\"5\"\r\n                                   onChange={this.props.onChange} />\r\n        </li>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n// ┌────────────────────────────────────┐\r\n// │  FormFieldsFePointLight Component  │\r\n// ╘════════════════════════════════════╛\r\nclass FormFieldsFePointLight extends React.Component {\r\n  // DefaultProps\r\n  static defaultProps = {};\r\n  // Render\r\n  render() {\r\n    // Return\r\n    return(\r\n      <React.Fragment>\r\n        <FormFieldsPosition {...this.props}\r\n                            x={true} y={true} z={true}\r\n                            width={false} height={false} />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n// ┌───────────────────────────────────┐\r\n// │  FormFieldsFeSpotLight Component  │\r\n// ╘═══════════════════════════════════╛\r\nclass FormFieldsFeSpotLight extends React.Component {\r\n  // DefaultProps\r\n  static defaultProps = {};\r\n  // Render\r\n  render() {\r\n    // Return\r\n    return(\r\n      <React.Fragment>\r\n        <li className={`element--field`} key={`specularExponent`}>\r\n          <InputFields.NumberInput name=\"specularExponent\"\r\n                                   value={this.props.element.attributes?.specularExponent?.value}\r\n                                   onChange={this.props.onChange} />\r\n        </li>\r\n        <FormFieldsPosition {...this.props}\r\n                            x={true} y={true} z={true}\r\n                            width={false} height={false} />\r\n        <li className={`element--field`} key={`pointsAtX_pointsAtY_pointsAtZ`}>\r\n          <InputFields.NumberInput name=\"pointsAtX\"\r\n                                   value={this.props.element.attributes?.pointsAtX?.value}\r\n                                   onChange={this.props.onChange} />\r\n          <InputFields.NumberInput name=\"pointsAtY\"\r\n                                   value={this.props.element.attributes?.pointsAtY?.value}\r\n                                   onChange={this.props.onChange} />\r\n          <InputFields.NumberInput name=\"pointsAtZ\"\r\n                                   value={this.props.element.attributes?.pointsAtZ?.value}\r\n                                   onChange={this.props.onChange} />\r\n        </li>\r\n        <li className={`element--field`} key={`limitingConeAngle`}>\r\n          <InputFields.NumberInput name=\"limitingConeAngle\"\r\n                                   value={this.props.element.attributes?.limitingConeAngle?.value}\r\n                                   range={true}\r\n                                   min=\"0\" max=\"180\" step=\"5\"\r\n                                   onChange={this.props.onChange} />\r\n        </li>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n// ┌───────────────────────────────────┐\r\n// │  FormFieldsFeMergeNode Component  │\r\n// ╘═══════════════════════════════════╛\r\nclass FormFieldsFeMergeNode extends React.Component {\r\n  // DefaultProps\r\n  static defaultProps = {};\r\n  // Render\r\n  render() {\r\n    // Return\r\n    return(\r\n      <React.Fragment>\r\n        <FormFieldsIds {...this.props} \r\n                       result={false}\r\n                       in={true} />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n// ┌──────────────────────────────┐\r\n// │  FormFieldsFeFunc Component  │\r\n// ╘══════════════════════════════╛\r\nclass FormFieldsFeFunc extends React.Component {\r\n  // DefaultProps\r\n  static defaultProps = {};\r\n  // Handler - handleTypeChange\r\n  handleTypeChange = (value, fieldName) => {\r\n    // Initialise\r\n    const oldType = this.props.element.attributes?.type?.value;\r\n    // Clear the fields of the old 'type' we're changing from\r\n    if (oldType === \"table\" || oldType === \"discrete\") {\r\n      this.props.onChange(null, \"tableValues\");\r\n    }\r\n    else if (oldType === \"linear\") {\r\n      this.props.onChange(null, \"slope\");\r\n      this.props.onChange(null, \"intercept\");\r\n    }\r\n    else if (oldType === \"gamma\") {\r\n      this.props.onChange(null, \"amplitude\");\r\n      this.props.onChange(null, \"exponent\");\r\n      this.props.onChange(null, \"offset\");\r\n    }\r\n    // Pass change of 'type' up to parent\r\n    this.props.onChange(value, fieldName);\r\n  }\r\n  // Render\r\n  render() {\r\n    // Return\r\n    return(\r\n      <React.Fragment>\r\n          <li className={`element--field`} key={`type`}>\r\n            <InputFields.ListInput name=\"type\"\r\n                                   value={this.props.element.attributes?.type?.value}\r\n                                   options={[\"identity\", \r\n                                             \"table\", \"discrete\",\r\n                                             \"linear\", \"gamma\"]}\r\n                                   onChange={this.handleTypeChange} />\r\n          </li>\r\n          { (this.props.element.attributes?.type?.value === \"table\"\r\n             || this.props.element.attributes?.type?.value === \"discrete\") &&\r\n          <React.Fragment>\r\n            <li className={`element--field`} key={`tableValues`}>\r\n              <InputFields.TextInput name=\"tableValues\"\r\n                                     value={this.props.element.attributes?.tableValues?.value}\r\n                                     onChange={this.props.onChange} />\r\n            </li>\r\n          </React.Fragment>\r\n          }\r\n          { (this.props.element.attributes?.type?.value === \"linear\") &&\r\n          <React.Fragment>\r\n            <li className={`element--field`} key={`slope`}>\r\n              <InputFields.TextInput name=\"slope\"\r\n                                     value={this.props.element.attributes?.slope?.value}\r\n                                     onChange={this.props.onChange} />\r\n            </li>\r\n            <li className={`element--field`} key={`intercept`}>\r\n              <InputFields.TextInput name=\"intercept\"\r\n                                     value={this.props.element.attributes?.intercept?.value}\r\n                                     onChange={this.props.onChange} />\r\n            </li>\r\n          </React.Fragment>\r\n          }\r\n          { (this.props.element.attributes?.type?.value === \"gamma\") &&\r\n          <React.Fragment>\r\n            <li className={`element--field`} key={`amplitude`}>\r\n              <InputFields.NumberInput name=\"amplitude\"\r\n                                       value={this.props.element.attributes?.amplitude?.value}\r\n                                       onChange={this.props.onChange} />\r\n            </li>\r\n            <li className={`element--field`} key={`exponent`}>\r\n              <InputFields.NumberInput name=\"exponent\"\r\n                                       value={this.props.element.attributes?.exponent?.value}\r\n                                       onChange={this.props.onChange} />\r\n            </li>\r\n            <li className={`element--field`} key={`offset`}>\r\n              <InputFields.NumberInput name=\"offset\"\r\n                                       value={this.props.element.attributes?.offset?.value}\r\n                                       onChange={this.props.onChange} />\r\n            </li>\r\n          </React.Fragment>\r\n          }\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n// ┌────────────────────────────┐\r\n// │  FormFieldsIds Components  │\r\n// ╘════════════════════════════╛\r\n// e.g. result, in, in2\r\nexport class FormFieldsIds extends React.Component {\r\n  // DefaultProps\r\n  static defaultProps = {\r\n    \"result\": false,\r\n        \"in\": false,\r\n       \"in2\": false,\r\n  };\r\n  // Render\r\n  render() {\r\n    // Remove current element's ID from elementId list\r\n    const elementIds = [...this.props.elementIds];\r\n    let findIndex = elementIds.findIndex(id => id === this.props.element.autoId);\r\n    if (findIndex >= 0) { elementIds.splice(findIndex, 1); }\r\n    // Return\r\n    return(\r\n      <React.Fragment>\r\n        { (this.props.result) && \r\n          <li className={`element--field`} key={`result`}>\r\n            <InputFields.IdInput name=\"result\"\r\n                                 value={this.props.element.attributes?.result?.value}\r\n                                 onChange={this.props.onChange} />\r\n          </li>\r\n        }\r\n        { (this.props.in) && \r\n          <li className={`element--field`} key={`in`}>\r\n            <InputFields.IdInput name=\"in\"\r\n                                 value={this.props.element.attributes?.in?.value}\r\n                                 options={[\"SourceGraphic\", \"SourceAlpha\", \r\n                                           \"BackgroundImage\", \"BackgroundAlpha\", \r\n                                           \"FillPaint\", \"StrokePaint\", \"————\"]}\r\n                                 elementIds={elementIds}\r\n                                 onChange={this.props.onChange} />\r\n          </li>\r\n        }\r\n        { (this.props.in2) && \r\n          <li className={`element--field`} key={`in2`}>\r\n            <InputFields.IdInput name=\"in2\"\r\n                                 value={this.props.element.attributes?.in2?.value}\r\n                                 options={[\"SourceGraphic\", \"SourceAlpha\", \r\n                                           \"BackgroundImage\", \"BackgroundAlpha\", \r\n                                           \"FillPaint\", \"StrokePaint\", \"————\"]}\r\n                                 elementIds={elementIds}\r\n                                 onChange={this.props.onChange} />\r\n          </li>\r\n        }\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n// ┌─────────────────────────────────┐\r\n// │  FormFieldsPosition Components  │\r\n// ╘═════════════════════════════════╛\r\n// e.g. width, height, x, y\r\nexport class FormFieldsPosition extends React.Component {\r\n  // DefaultProps\r\n  static defaultProps = {\r\n    \"width\": true,\r\n    \"height\": true,\r\n    \"x\": true,\r\n    \"y\": true,\r\n    \"z\": false,\r\n  }; \r\n  // Render\r\n  render() {\r\n    // Return\r\n    return(\r\n      <React.Fragment>\r\n        { (this.props.width || this.props.height) &&\r\n          <li className={`element--field`} key={`width_height`}>\r\n              { (this.props.width) && \r\n                <InputFields.NumberInput name=\"width\"\r\n                                         value={this.props.element.attributes?.width?.value}\r\n                                         onChange={this.props.onChange} /> }\r\n              { (this.props.height) && \r\n                <InputFields.NumberInput name=\"height\"\r\n                                         value={this.props.element.attributes?.height?.value}\r\n                                         onChange={this.props.onChange} /> }\r\n          </li>\r\n        }\r\n        { (this.props.x || this.props.y) &&\r\n          <li className={`element--field`} key={`x_y_z`}>\r\n              { (this.props.x) && \r\n                <InputFields.NumberInput name=\"x\"\r\n                                         value={this.props.element.attributes?.x?.value}\r\n                                         onChange={this.props.onChange} /> }\r\n              { (this.props.y) && \r\n                <InputFields.NumberInput name=\"y\"\r\n                                         value={this.props.element.attributes?.y?.value}\r\n                                         onChange={this.props.onChange} /> }\r\n              { (this.props.z) && \r\n                <InputFields.NumberInput name=\"z\"\r\n                                         value={this.props.element.attributes?.z?.value}\r\n                                         onChange={this.props.onChange} /> }\r\n              \r\n          </li>\r\n        }\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n// ┌──────────────────────────────────────┐\r\n// │  FormFieldsChildElements Components  │\r\n// ╘══════════════════════════════════════╛\r\n// e.g. <feMergeNode> etc.\r\nexport class FormFieldsChildElements extends React.Component {\r\n  // DefaultProps\r\n  static defaultProps = {\r\n    \"label\": \"child elements\",\r\n    \"fixedChildElements\": false,\r\n  };\r\n  // State\r\n  state = {\r\n    newElementType: this.props.value ?? \"\",\r\n  };\r\n  // Handlers - handleNewElementTypeChange\r\n  handleNewElementTypeChange = (event) => {\r\n    this.setState({ newElementType: event.target.value });\r\n  }\r\n    // Handler - Add New Element\r\n  handleAddNewElement = (elementType) => {\r\n    // Update State\r\n    this.setState(prevState => {\r\n      // Deep clone the base element data\r\n      let newElement = svgElements[elementType];\r\n      newElement = JSON.parse(JSON.stringify(newElement));\r\n      // Add the new element to element-list\r\n      prevState.elements.push(newElement);\r\n      // Return modified element-list\r\n      return ({ \"elements\": [...prevState.elements] });\r\n    });\r\n  }\r\n  // Handlers - handleAddNewElement\r\n  handleAddNewElement = (event) => {\r\n    // If there's no element selected, do nothing\r\n    if (!this.state.newElementType) { return; }\r\n    // Deep clone the base element data\r\n    let newElement = svgElements[this.state.newElementType];\r\n    newElement = JSON.parse(JSON.stringify(newElement));\r\n    // Add to existing childElements\r\n    const newChildElements = this.props.childElements ?? [];\r\n    newChildElements.push(newElement);\r\n    // Pass event to parent\r\n    this.props.onChange(newChildElements, \"childElements\");\r\n  }\r\n  // Handlers - handleChangeElement\r\n  handleChangeElement = (element, index) => {\r\n      // Replace changed element in childElements\r\n      const newChildElements = this.props.childElements;\r\n      newChildElements[index] = element;\r\n      // Pass event to parent\r\n      this.props.onChange(newChildElements, \"childElements\");\r\n  }\r\n  // Handler - handleDeleteElement\r\n  handleDeleteElement = (elementIndex) => {\r\n      // Remove element from childElements\r\n      const newChildElements = this.props.childElements;\r\n      newChildElements.splice(elementIndex, 1);\r\n      // Pass event to parent\r\n      this.props.onChange(newChildElements, \"childElements\");\r\n  }\r\n  // Render\r\n  render() {\r\n    // Return\r\n    return(\r\n      <React.Fragment>\r\n        <li className=\"element--field\">\r\n          <div className=\"field--container\">\r\n            <label className=\"field--label\">\r\n              {this.props.label}\r\n            </label>\r\n            <hr className=\"break\" />\r\n            <div className=\"filter--elements\">\r\n              { (this.props.childElements) &&\r\n                this.props.childElements.map((element, index) => (\r\n                  <EditElementForm key={index}\r\n                                   index={index}\r\n                                   element={element}\r\n                                   elementIds={this.props.elementIds}\r\n                                   onChangeElement={this.handleChangeElement}\r\n                                   onDeleteElement={ this.props.fixedChildElements ?\r\n                                                     false : this.handleDeleteElement }\r\n                                   onMoveElement={this.props.onMoveElement} />\r\n              ))}\r\n            </div>\r\n            { (this.props.options) &&\r\n              <div className=\"filter--footer\">\r\n                <select value={this.state.newElementType} onChange={this.handleNewElementTypeChange}>\r\n                  <option value=\"\" />\r\n                  { \r\n                    this.props.options.map((elementType, i) => \r\n                      <option key={i} value={elementType}>&lt;{elementType}&gt;</option>\r\n                    )\r\n                  }\r\n                </select>\r\n                <button className=\"\" title=\"Add Filter Element\" onClick={this.handleAddNewElement}>\r\n                  <i className=\"fas fa-plus\"></i>\r\n                </button>\r\n              </div>\r\n            }\r\n          </div>\r\n        </li>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n// ┌──────────┐\r\n// │  Export  │\r\n// ╘══════════╛\r\nexport default EditElementForm;\r\n","// ┌───────────┐\r\n// │  Imports  │\r\n// ╘═══════════╛\r\nimport React from \"react\";\r\nimport ReactDOMServer from \"react-dom/server\";\r\nimport * as InputFields from \"components/InputFields\";\r\nimport * as ElementForms from \"components/ElementForms\";\r\nimport svgElements from \"data/svg-elements\";\r\nimport XMLViewer from \"react-xml-viewer\";\r\n// ┌────────────────┐\r\n// │  FilterEditor  │\r\n// ╘════════════════╛\r\nclass FilterEditor extends React.Component {\r\n  // DefaultProps\r\n  static defaultProps = {};\r\n  // State\r\n  state = {\r\n    \"elements\": [],\r\n    \"selectedId\": null,\r\n  };\r\n  // Handler - Select Element\r\n  handleSelectElement = (autoId) => {\r\n    // Update State\r\n    this.setState({ \"selectedId\": autoId });\r\n  }\r\n  // Handler - Add New Element\r\n  handleAddNewElement = (elementType) => {\r\n    // Update State\r\n    this.setState(prevState => {\r\n      // Deep clone the base element data\r\n      let newElement = svgElements[elementType];\r\n      newElement = JSON.parse(JSON.stringify(newElement));\r\n      // Add the new element to element-list\r\n      prevState.elements.push(newElement);\r\n      // Return modified element-list\r\n      return ({ \"elements\": [...prevState.elements] });\r\n    });\r\n  }\r\n  // Handler - Change Element\r\n  handleChangeElement = (newElement) => {\r\n    // Update State\r\n    this.setState(prevState => {\r\n      // Find element to update\r\n      let targetIndex = prevState.elements\r\n                                 .findIndex(element => element.autoId === newElement.autoId);\r\n      // Replace element\r\n      if (targetIndex !== -1) { prevState[targetIndex] = newElement; }\r\n      // Return modified element-list\r\n      return ({ \"elements\": [...prevState.elements] });\r\n    });\r\n  }\r\n  // Handler - Move Element\r\n  handleMoveElement = (moveDirection, targetAutoId) => {\r\n    // Update State\r\n    this.setState(prevState => {\r\n      // Find moving element's index\r\n      const findIndex = prevState.elements\r\n                                 .findIndex(element => element.autoId === targetAutoId);\r\n      // Calculate newIndex\r\n      let newIndex = findIndex + moveDirection;\r\n      // If newIndex is out-of-bounds, do nothing\r\n      if (newIndex < 0 || newIndex > prevState.elements.length - 1) { return; }\r\n      // Move element to newIndex\r\n      prevState.elements.splice(newIndex, 0, prevState.elements.splice(findIndex, 1)[0]);\r\n      // Return modified element-list\r\n      return ({ \"elements\": [...prevState.elements] });\r\n    });\r\n  }\r\n  // Handler - Delete Element\r\n  handleDeleteElement = (targetAutoId) => {\r\n    // Update State\r\n    this.setState(prevState => {\r\n      // Remove element from element-list\r\n      prevState.elements = prevState.elements.filter(el => el.autoId !== targetAutoId);\r\n      // If element was selected, clear it\r\n      if (prevState.selectedId === targetAutoId) { prevState.selectedId = null; }\r\n      // Return modified element-list\r\n      return ({ \r\n        \"elements\": [...prevState.elements],\r\n        \"selectedId\": prevState.selectedId,\r\n      });\r\n    });\r\n  }\r\n  // Render\r\n  render() {\r\n    // Calculate autoIds\r\n    const elementsAdded = [];\r\n    const elementIds = [];\r\n    this.state.elements.forEach(element => {\r\n      // Add entry to elementsAdded\r\n      elementsAdded.push(element.shorthand);\r\n      // Generate autoId\r\n      const elementCount = elementsAdded.filter(el => el === element.shorthand).length;\r\n      element.autoId = `${element.shorthand}-${elementCount}`;\r\n      // If the element hasn't had a result-id assigned yet, assign autoId\r\n      const resultAttribute = element.attributes[\"result\"];\r\n      if (resultAttribute && !resultAttribute.value) {\r\n        resultAttribute.value = element.autoId;\r\n      }\r\n      // Add element result id into list of ids, for in/in2 fields\r\n      elementIds.push(resultAttribute.value);\r\n    });\r\n    // Find selected element\r\n    const selectedElement = this.state.elements.find(el => el.autoId === this.state.selectedId);\r\n    // Return\r\n    return(\r\n      <main className=\"app--main\">\r\n        <FilterPreview elements={this.state.elements} />\r\n        <div className=\"main--filter\">\r\n          <h2 className=\"filter--header\">&lt;filter&gt;</h2>\r\n          <ElementList elements={this.state.elements}\r\n                       elementIds={elementIds}\r\n                       selectedId={this.state.selectedId}\r\n                       onSelectElement={this.handleSelectElement} \r\n                       onAddNewElement={this.handleAddNewElement}\r\n                       onChangeElement={this.handleChangeElement}\r\n                       onMoveElement={this.handleMoveElement} />\r\n        </div>\r\n        <div className=\"main--details\">\r\n          { selectedElement &&\r\n            <ElementForms.EditElementForm element={selectedElement}\r\n                                          elementIds={elementIds}\r\n                                          onChangeElement={this.handleChangeElement}\r\n                                          onDeleteElement={this.handleDeleteElement} />\r\n          }\r\n        </div>\r\n      </main>\r\n    );\r\n  };\r\n}\r\n// ┌───────────────┐\r\n// │  ElementList  │\r\n// ╘═══════════════╛\r\nclass ElementList extends React.Component {\r\n  // State\r\n  state = {\r\n    newElementType: \"\",\r\n  };\r\n  // Handlers - New Element Type Change\r\n  handleNewElementTypeChange = (value, fieldName) => {\r\n    this.setState({ newElementType: value });\r\n  }\r\n  // Handlers - Add New Element\r\n  handleAddNewElement = (event) => {\r\n    // If there's no element selected, do nothing\r\n    if(!this.state.newElementType) { return }\r\n    // Pass event to parent\r\n    this.props.onAddNewElement(this.state.newElementType);\r\n  }\r\n  // Render\r\n  render() {\r\n    // Return\r\n    return(\r\n      <React.Fragment>\r\n        <div className=\"filter--elements\">\r\n          { (this.props.elements) &&\r\n            this.props.elements.map((element, index) => (\r\n              <ElementForms.EditElementIdsForm \r\n                            key={element.autoId}\r\n                            element={element}\r\n                            elementIds={this.props.elementIds}\r\n                            selected={element.autoId === this.props.selectedId ? \"selected\" : \"\"}\r\n                            onSelectElement={this.props.onSelectElement} \r\n                            onChangeElement={this.props.onChangeElement}\r\n                            onMoveElement={this.props.onMoveElement} />\r\n          ))}\r\n        </div>\r\n        <div className=\"filter--footer\">\r\n          <InputFields.ListInput name=\"type\"\r\n                                 label={false}\r\n                                 value={this.state.newElementType}\r\n                                 options={[\"feFlood\", \"feImage\", \"feTurbulence\",\r\n                                           \"————\", \"feColorMatrix\", \"feComponentTransfer\",\r\n                                           \"feConvolveMatrix\", \"feDisplacementMap\", \r\n                                           \"feDropShadow\", \"feGaussianBlur\",\r\n                                           \"feMorphology\", \"feOffset\", \"feTile\",\r\n                                           \"————\", \"feDiffuseLighting\", \"feSpecularLighting\",\r\n                                           \"————\", \"feBlend\", \"feComposite\", \"feMerge\"]}\r\n                                 onChange={this.handleNewElementTypeChange} />\r\n          <button className=\"\" title=\"Add Filter Element\" onClick={this.handleAddNewElement}>\r\n            <i className=\"fas fa-plus\"></i>\r\n          </button>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  };\r\n}\r\n// ┌─────────────────┐\r\n// │  FilterPreview  │\r\n// ╘═════════════════╛\r\nclass FilterPreview extends React.Component {\r\n  // DefaultProps\r\n  static defaultProps = {};\r\n  // State\r\n  state = {};\r\n  // Render\r\n  render() {\r\n    // Generate preview SVG\r\n    const previewSVG = <SVGPreview elements={this.props.elements}\r\n                                   previewPreset={this.state.previewPreset} />;\r\n    // Return\r\n    return(\r\n      <div className=\"main--preview\">\r\n        <h2 className=\"preview--title\">Filter Preview</h2>\r\n        <div className=\"preview--svg\">\r\n          {previewSVG}\r\n        </div>\r\n        <div className=\"preview--code\">\r\n          <SVGPreviewCode svg={previewSVG} />\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n}\r\n// ┌──────────────┐\r\n// │  SVGPreview  │\r\n// ╘══════════════╛\r\nclass SVGPreview extends React.Component {\r\n  // DefaultProps\r\n  static defaultProps = {\r\n    \"previewPreset\": \"Solid Background\",\r\n  };\r\n  // Components - FilterElements\r\n  get FilterElements() {\r\n    // For each element in filter, generate it\r\n    const FilterElements = this.props.elements.map((element, index) => {\r\n      // Return filter element\r\n      return generateElement(element, index);\r\n    });\r\n    // Return FilterElements\r\n    return FilterElements;\r\n    // Function - generateElement()\r\n    function generateElement(element, index) {\r\n      // Define element attributes\r\n      const elementProps = { \"key\": index };\r\n      for (const attribute of Object.values(element.attributes)) {\r\n        // If attribute doesn't have a value, skip it\r\n        if (attribute.value == null\r\n            || attribute.value === \"\") { continue; }\r\n        // Convert attribute-names to React syntax \r\n        // (e.g. \"flood-color\" → \"floodColor\")\r\n        let attributeName = attribute.name;\r\n        const regExp = /-(\\w)/;\r\n        while (attributeName.match(regExp)) {\r\n          attributeName = attributeName.replace(regExp, (m, p1) => {\r\n            return p1.toUpperCase();\r\n          });\r\n        }\r\n        // Otherwise, assign it\r\n        elementProps[attributeName] = attribute.value;\r\n      };\r\n      // If there's any child elements, recursively call\r\n      const childElements = element.childElements?.map((element, index) => {\r\n        // Return childElement\r\n        return generateElement(element, index);\r\n      });\r\n      // Return filter element\r\n      return (React.createElement(element.type, elementProps, childElements));\r\n    }\r\n  }\r\n  // Components - filteredElement\r\n  get FilteredElement() {\r\n    // Map of elements by previewPreset names\r\n    const elementMap = {\r\n      \"Solid Background\": <rect x=\"0%\" y=\"0%\" width=\"100%\" height=\"100%\" fill=\"#808080\" />,\r\n      \"Centered Circle\": <circle cx=\"50%\" cy=\"50%\" r=\"33%\" fill=\"#404040\" />,\r\n      \"Lorem Ipsum\": <text x=\"50%\" y=\"50%\"\r\n                           textAnchor=\"middle\" textLength=\"90%\"\r\n                           fontFamily=\"serif\" fill=\"#202020\"\r\n                           fontSize=\"72\" fontWeight=\"900\">Lorem Ipsum</text>,\r\n    }\r\n    // Match element to previewPreset\r\n    const FilteredElement = elementMap?.[this.props.previewPreset];\r\n    // Return\r\n    return FilteredElement;\r\n  }\r\n  // Render\r\n  render() {\r\n    // Return\r\n    return(\r\n      <React.Fragment>\r\n        <svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" \r\n             xmlnsXlink=\"http://www.w3.org/1999/xlink\">\r\n          <defs>\r\n            {/* Filter */}\r\n            <filter id=\"new-filter\" x=\"-10%\" y=\"-10%\" width=\"120%\" height=\"120%\">\r\n              { this.FilterElements }\r\n            </filter>\r\n          </defs>\r\n          {/* Object to Filter */}\r\n          <g filter={this.FilterElements.length > 0 ? \"url(#new-filter)\" : \"\"}>\r\n            { this.FilteredElement }\r\n          </g>\r\n        </svg>\r\n      </React.Fragment>\r\n    );\r\n  };\r\n}\r\n// ┌──────────────────┐\r\n// │  SVGPreviewCode  │\r\n// ╘══════════════════╛\r\nclass SVGPreviewCode extends React.Component {\r\n  // DefaultProps\r\n  static defaultProps = {\r\n    \"indentSize\": 2,\r\n    \"collapsible\": false,\r\n    \"theme\": {\r\n                \"textColor\": \"#212121\",\r\n             \"commentColor\": \"#616161\",\r\n           \"separatorColor\": \"#616161\",\r\n                 \"tagColor\": \"#D32F2F\",\r\n        \"attributeKeyColor\": \"#F9A825\",\r\n      \"attributeValueColor\": \"#4CAF50\",\r\n               \"cdataColor\": \"#673AB7\",\r\n            \"overflowBreak\": true,\r\n    },\r\n  };\r\n  // Render\r\n  render() {\r\n    const svgCode = ReactDOMServer.renderToStaticMarkup(this.props.svg);\r\n    // Return\r\n    return(\r\n      <React.Fragment>\r\n        <XMLViewer className=\"code--viewer\"\r\n                   xml={svgCode}\r\n                   indentSize={this.props.indentSize}\r\n                   collapsible={this.props.collapsible}\r\n                   theme={this.props.theme} />\r\n      </React.Fragment>\r\n    );\r\n  };\r\n}\r\n// ┌──────────┐\r\n// │  Export  │\r\n// ╘══════════╛\r\nexport default FilterEditor;\r\n","// ┌───────────┐\n// │  Imports  │\n// ╘═══════════╛\nimport \"./css/main.scss\"; //Main App CSS\nimport FilterEditor from \"./components/FilterEditor.js\";\n\n// ┌────────────┐\n// │  Main App  │\n// ╘════════════╛\nfunction App() {\n  return (\n    <div className=\"app\">\n      <header className=\"app--header\">\n        <h1 className=\"header--title\">SVG-Filter-Builder</h1>\n      </header>\n      <FilterEditor />\n      <footer className=\"app--footer\">\n        <p> — Project Github: <a href=\"https://github.com/bluesatin/SVG-Filter-Builder\">SVG-Filter-Builder</a> — </p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}